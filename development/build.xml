<?xml version="1.0"?>
<project name="xmex" default="usage" basedir="..">
  <target name="usage">
    <echo>Following targets are available...                                              </echo>
    <echo>                                                                                </echo>
    <echo>release                Builds the final scripts and creates the release         </echo>
    <echo>                       and Docker images for the distribution.                  </echo>
    <echo>                                                                                </echo>
    <echo>clean                  Cleanup of temporary directories and files from the      </echo>
    <echo>                       relase task.                                             </echo>
    <echo>                                                                                </echo>
    <echo>changes                Synchronizes README.md with CHANGES.                     </echo>
    <echo>                                                                                </echo>
    <echo>libxml                 Unzip libxml2 in the project for development on Windows. </echo>
    <echo>                                                                                </echo>
    <echo>docker-test            Creates a test version and Docker image and              </echo>
    <echo>                       launches it in local Docker.                             </echo>
    <echo>                                                                                </echo>
    <echo>docker-integration     Creates a integration version and Docker image and       </echo>
    <echo>                       launches it in local Docker.                             </echo>
    <echo>                                                                                </echo>
    <echo>docker-release         Creates a final release and Docker image and             </echo>
    <echo>                       launches it in local Docker.                             </echo>
    <echo>                                                                                </echo>
    <echo>docker-push-release    Creates a final release and Docker image and pushes      </echo>
    <echo>                       image to Docker Hub.                                     </echo>
  </target>
  
  <property name="workspace" value="${basedir}"/>
  <property name="manual" value="${workspace}/manual"/>
  <property name="release" value="${workspace}/release"/>
  <property name="build" value="${release}/${ant.project.name}"/>
  <property name="trace" value="${release}/trace"/>
  <property name="sources" value="${workspace}/sources"/>
  <property name="test" value="${workspace}/test"/>
  <property name="development" value="${workspace}/development"/>

  <property name="filter" value="**/*.js,**/*.html,**/*.ini,**/*.cmd"/>

  <target name="libxml" depends="changes">
    <unzip src="${development}/libxml2-2.9.3_win_x64.zip" dest="${sources}" overwrite="true"/>
  </target>

  <target name="release" depends="changes">
    <release-locate/>

    <delete dir="${trace}"/>
    <mkdir dir="${trace}"/>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true"
        output="${trace}/npm-stdout.log" error="${trace}/npm-stderr.log">
      <arg value="/c"/>
      <arg value="npm run build"/>
    </exec>
    <echo file="${trace}/npm-stdout.log" append="true" message="&#09;"/>
    <replaceregexp file="${trace}/npm-stdout.log" flags="g" byline="false"
        match="\x1B\[\d+m" replace=""/>
    <loadfile srcfile="${trace}/npm-stdout.log" property="npm.stdout"/>
    <echo message="${npm.stdout}"/>
    <echo file="${trace}/npm-stderr.log" append="true" message="&#09;"/>
    <replaceregexp file="${trace}/npm-stderr.log" flags="g" byline="false"
        match="\x1B\[\d+m" replace=""/>
    <loadfile srcfile="${trace}/npm-stderr.log" property="npm.stderr"/>
    <echo message="${npm.stderr}"/>
    <fail message="&lt;npm run build&gt; failed">
      <condition>
        <not>
          <available file="${sources}/service-build.js"/>
        </not>
      </condition>
    </fail>

    <compress-js file="${sources}/service-build.js" trace="${trace}"/>
    <copy file="${sources}/service-build.js" tofile="${sources}/service-build-test.js" overwrite="true"/>
    <replaceregexp file="${sources}/service-build.js" encoding="UTF-8" flags="g" byline="false"
        match="(?s)[\r\n]+\s*\{{3,}.*?\}{3,}"
        replace=""/>
    <delete dir="${build}"/>
    <mkdir dir="${build}"/>
    <copy file="${sources}/service-build.js" tofile="${build}/service.js" overwrite="true"/>
    <copy file="${sources}/service.ini" tofile="${build}/service.ini" overwrite="true"/>
    <copy file="${workspace}/package.json" tofile="${build}/package.json" overwrite="true"/>
    <copy file="${workspace}/LICENSE" todir="${build}" overwrite="true"/>
    <copy file="${workspace}/CHANGES" todir="${build}" overwrite="true"/>
    <release-insert target="${build}"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${build}" includes="**/*"/>
    </touch>

    <delete file="${release}/seanox-${ant.project.name}-${release.version}.zip"/>
    <delete file="${release}/seanox-${ant.project.name}-latest.zip"/>
    <zip basedir="${build}" destfile="${release}/seanox-${ant.project.name}-${release.version}.zip"/>
    <copy file="${release}/seanox-${ant.project.name}-${release.version}.zip" tofile="${release}/seanox-${ant.project.name}-latest.zip" overwrite="true"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${release}" includes="seanox-${ant.project.name}*.zip"/>
    </touch>

    <docker-build target="integration"/>
    <docker-build target="release"/>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker"/>
      <arg value="build"/>
      <arg value="-t"/>
      <arg value="${ant.project.name}:${release.version}"/>
      <arg value="-t"/>
      <arg value="seanox/${ant.project.name}:${release.version}"/>
      <arg value="-t"/>
      <arg value="${ant.project.name}:latest"/>
      <arg value="-t"/>
      <arg value="seanox/${ant.project.name}:latest"/>
      <arg value="--target"/>
      <arg value="release"/>
      <arg value="."/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker images --filter=reference=seanox/${ant.project.name} --filter=reference=${ant.project.name}"/>
    </exec>

    <delete dir="${build}-win"/>
    <mkdir dir="${build}-win"/>
    <mkdir dir="${build}-win/data"/>
    <mkdir dir="${build}-win/logs"/>
    <mkdir dir="${build}-win/node"/>
    <copy todir="${build}-win">
      <fileset dir="${build}" includes="**/*"/>
    </copy>
    <copy file="${sources}/service.cmd" todir="${build}-win"/>
    <unzip src="${development}/libxml2-2.9.3_win_x64.zip" dest="${build}-win"/>
    <copy file="${development}/libxml2-2.9.3_win_x64.license" tofile="${build}-win/libxml2/license"/>
    <unzip src="${development}/nssm-2.24.zip" dest="${build}-win/nssm"/>
    <copy file="${build}-win/nssm/nssm-2.24/win64/nssm.exe" todir="${build}-win/nssm"/>
    <copy file="${build}-win/nssm/nssm-2.24/ChangeLog.txt" todir="${build}-win/nssm"/>
    <copy file="${build}-win/nssm/nssm-2.24/README.txt" todir="${build}-win/nssm"/>
    <copy file="${development}/nssm-2.24.license" tofile="${build}-win/nssm/LICENSE"/>
    <delete dir="${build}-win/nssm/nssm-2.24"/>
    <release-insert target="${build}-win"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${build}-win" includes="**/*"/>
    </touch>

    <delete file="${release}/seanox-${ant.project.name}-${release.version}-win.zip"/>
    <delete file="${release}/seanox-${ant.project.name}-win-latest.zip"/>
    <zip basedir="${build}-win" destfile="${release}/seanox-${ant.project.name}-${release.version}-win.zip"/>
    <copy file="${release}/seanox-${ant.project.name}-${release.version}.zip" tofile="${release}/seanox-${ant.project.name}-win-latest.zip" overwrite="true"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${release}" includes="seanox-${ant.project.name}*.zip"/>
    </touch>

    <replaceregexp file="${workspace}/README.md"
        match="(Seanox\s+XML-Micro-Exchange\s+)\d+[\.\d]+" flags="g" byline="false"
        replace="\1${release.version}"/>
    <replaceregexp file="${workspace}/README.md"
        match="(seanox-xmex-)\d+[\.\d]+(\.zip)" flags="g" byline="false"
        replace="\1${release.version}\2"/>
  </target>

  <macrodef name="release-locate">
    <sequential>
      <copy file="CHANGES" tofile="CHANGES.tmp" overwrite="true"/>
      <replaceregexp file="CHANGES.tmp"
          match="(?s)^\s*([\d\.x]+) (\d{4})([\dx]+).*$" flags="g" byline="false"
          replace="release.version=\1&#x000D;release.year=\2&#x000D;release.date=\2\3&#x000D;"/>
      <replaceregexp file="CHANGES.tmp" match="x+" replace="0000" flags="g" byline="false"/>
      <loadproperties>
        <file file="CHANGES.tmp"/>
      </loadproperties>
      <delete file="CHANGES.tmp"/>
      <echo file="CHANGES.tmp" message="release.major=${release.version}"/>
      <replaceregexp file="CHANGES.tmp"
          match="(?&lt;=\d+)\." byline="true" replace="&#x000D;release.minor="/>
      <replaceregexp file="CHANGES.tmp"
          match="(?&lt;=\d+)\." byline="true" replace="&#x000D;release.patch="/>
      <loadproperties>
        <file file="CHANGES.tmp"/>
      </loadproperties>
      <delete file="CHANGES.tmp"/>
    </sequential>
  </macrodef>

  <macrodef name="release-insert">
    <attribute name="target"/>
    <sequential>
      <replace dir="@{target}" includes="${filter}"
          token="#[ant:release-year]" value="${release.year}"/>
      <replace dir="@{target}" includes="${filter}"
          token="#[ant:release-date]" value="${release.date}"/>
      <replace dir="@{target}" includes="${filter}"
          token="#[ant:release-version]" value="${release.version}"/>
    </sequential>
  </macrodef>

  <target name="changes">
    <replaceregexp file="${workspace}/CHANGES" match="&#x00E4;" replace="ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00C4;" replace="Ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00F6;" replace="oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00D6;" replace="Oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00FC;" replace="ue" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00DC;" replace="Ue" flags="g"/>

    <copy file="${workspace}/CHANGES" tofile="${workspace}/CHANGES.tmp" overwrite="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^\s+" replace="" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="(?s)^(.*?)[\r\n]+\d[\d\. x]+.*$" replace="\1" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(.*?)\s*$" replace="\1  " flags="g" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(\d[\.\d x]+)[^\r\n]*" replace="## \1" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^ {0,4}([A-Z]+:.*)\s*$" replace="\1" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="(?s)[\r\n]+ [^\r\n]+" replace="" flags="g" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(## \d[\.\d]+ \d+)(  )" replace="\1 (summary of the current version)\2" flags="g" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(## \d[\.\d]+ [\dx]+)(  )" replace="\1 (summary of the next version)\2" flags="g" byline="true"/>
    <loadresource property="changes">
      <file file="${workspace}/CHANGES.tmp"/>
    </loadresource>
    <delete file="${workspace}/CHANGES.tmp"/>
    <replaceregexp file="${workspace}/README.md"
        match="(?si)(# Changes \(Change Log\)\s+).*?(\[Read more\])" flags="g" byline="false"
        replace="\1${changes}${line.separator}${line.separator}\2"/>
    <tstamp>
      <format property="now.year" pattern="yyyy"/>
    </tstamp>
    <replaceregexp file="${workspace}/README.md"
        match="(?si)(?&lt;=\(C\)\s)\d{4}\b" flags="g" byline="true"
        replace="${now.year}"/>
  </target>

  <macrodef name="compress-js">
    <attribute name="file"/>
    <attribute name="trace"/>
    <sequential>
      <echo>Compressing: @{file}</echo>
      <!--
        Remove all block comments if they start at the beginning of the line,
        ignore spaces before and that twice, because block comments expose other
        block comments :-|
      -->
      <basename property="script" file="@{file}"/>
      <copy file="@{file}" tofile="@{trace}/${script}_0" overwrite="true"/>
      <copy file="@{trace}/${script}_0" tofile="@{trace}/${script}_1" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_1" encoding="UTF-8" flags="g" byline="false"
          match="(?s)(^|\R)\s*/\*.*?\*/"
          replace="\1"/>
      <replaceregexp file="@{trace}/${script}_1" encoding="UTF-8" flags="g" byline="false"
          match="(?s)(^|\R)\s*/\*.*?\*/"
          replace="\1"/>
      <!-- remove all line comments if they start at the beginning of the line, ignore spaces before -->
      <copy file="@{trace}/${script}_1" tofile="@{trace}/${script}_2" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_2" encoding="UTF-8" flags="g" byline="true"
          match="^\s*//.*$"
          replace=""/>
      <copy file="@{trace}/${script}_2" tofile="@{trace}/${script}_3" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_3" encoding="UTF-8" flags="g" byline="true"
          match="^\s+//.*$"
          replace=""/>
      <!-- remove all line comments outside literals -->
      <copy file="@{trace}/${script}_3" tofile="@{trace}/${script}_4" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_4" encoding="UTF-8" flags="g" byline="true"
          match="^((?:(?:&#34;.*?&#34;)|(?:'.*?')|(?:´.*?´)){0,}[^&#34;'´\r\n]*?)(?&lt;=[\&amp;\|\+\-\*/=,;(){}])//.*$"
          replace="\1"/>
      <!-- combining of the line breaks -->
      <copy file="@{trace}/${script}_4" tofile="@{trace}/${script}_5" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_5" encoding="UTF-8" flags="g" byline="false"
          match="(?s)(\s*\R)+"
          replace="&#13;"/>
      <copy file="@{trace}/${script}_5" tofile="@{trace}/${script}_6" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <copy file="@{trace}/${script}_6" tofile="@{file}" overwrite="true"/>
    </sequential>
  </macrodef>

  <macrodef name="docker-build">
    <attribute name="target"/>
    <sequential>
      <exec executable="cmd" failonerror="false" failifexecutionfails="false">
        <arg value="/c"/>
        <arg value="docker kill ${ant.project.name}-@{target}"/>
      </exec>
      <exec executable="cmd" failonerror="true" failifexecutionfails="true">
        <arg value="/c"/>
        <arg value="docker build -t ${ant.project.name}:@{target} --target @{target} ."/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="docker-run">
    <attribute name="target"/>
    <sequential>
      <exec executable="cmd" failonerror="true" failifexecutionfails="true">
        <arg value="/c"/>
        <arg value="docker run -d -p 8000:8000/tcp --rm --name ${ant.project.name}-@{target} ${ant.project.name}:@{target}"/>
      </exec>
      <exec executable="cmd" failonerror="true" failifexecutionfails="true">
        <arg value="/c"/>
        <arg value="docker ps"/>
      </exec>
    </sequential>
  </macrodef>

  <target name="docker-test">
    <docker-build target="test"/>
    <docker-run target="test"/>
  </target>
  <target name="docker-integration" depends="release">
    <docker-run target="integration"/>
  </target>
  <target name="docker-release" depends="release">
    <docker-run target="release"/>
  </target>

  <target name="docker-push-release" depends="release">
    <property file="${workspace}/.credentials"/>
    <condition property="credentials.exists">
      <and>
        <matches pattern="^.*\S.*$" string="${docker.user}"/>
        <isset property="docker.user"/>
        <matches pattern="^.*\S.*$" string="${docker.password}"/>
        <isset property="docker.password"/>
      </and>
    </condition>
    <fail message="Credentials are missing (check file .credentials)" unless="credentials.exists"/>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker login -u=${docker.user} -p=${docker.password} ${docker.registry}"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker push seanox/${ant.project.name}:latest"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker push seanox/${ant.project.name}:${release.version}"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker logout"/>
    </exec>
  </target>

  <target name="clean">
    <delete dir="${workspace}/release/trace"/>
    <delete dir="${workspace}/release/xmex"/>
    <delete dir="${workspace}/sources/data"/>
    <delete dir="${workspace}/sources/logs"/>
    <delete file="${workspace}/sources/service-build.js"/>
    <delete file="${workspace}/sources/service-build-test.js"/>
  </target>
</project>