<?xml version="1.0"?>
<project name="xmex" default="usage" basedir="..">
  <target name="usage">
    <echo>Following targets are available...                                              </echo>
    <echo>                                                                                </echo>
    <echo>  install                     Prepares the project initially for development on </echo>
    <echo>                              Windows and unzip libxml2 into the project.       </echo>
    <echo>                                                                                </echo>
    <echo>  changes                     Synchronizes README.md with CHANGES.              </echo>
    <echo>                                                                                </echo>
    <echo>  release                     Builds the final the release and Docker images for</echo>
    <echo>                              the distribution.                                 </echo>
    <echo>                                                                                </echo>
    <echo>  clean                       Cleanup of temporary data for release and tests.  </echo>
    <echo>                                                                                </echo>
    <echo>  docker-clean                Cleanup of temporary data for release and tests.  </echo>
    <echo>                                                                                </echo>
    <echo>  docker-test                 Creates a test version and Docker image and       </echo>
    <echo>                              launches it in local Docker.                      </echo>
    <echo>                                                                                </echo>
    <echo>  docker-integration          Creates an integration version and Docker image   </echo>
    <echo>                              and launches it in local Docker.                  </echo>
    <echo>                                                                                </echo>
    <echo>  docker-integration-trace    Updating trace-docker.log with trace.log in the   </echo>
    <echo>                              container.                                        </echo>
    <echo>                                                                                </echo>
    <echo>  docker-release              Creates a final release and Docker image and      </echo>
    <echo>                              launches it in local Docker.                      </echo>
    <echo>                                                                                </echo>
    <echo>  docker-push-release         Creates a final release and Docker image and      </echo>
    <echo>                              pushes the image to Docker Hub.                   </echo>
  </target>
  
  <property name="workspace" value="${basedir}"/>
  <property name="manual" value="${workspace}/manual"/>
  <property name="release" value="${workspace}/release"/>
  <property name="build" value="${release}/${ant.project.name}"/>
  <property name="trace" value="${release}/trace"/>
  <property name="sources" value="${workspace}/sources"/>
  <property name="test" value="${workspace}/test"/>
  <property name="development" value="${workspace}/development"/>

  <property name="filter" value="**/*.js,**/*.html,**/*.xml,**/*.md,**/*.yaml,**/*.ini,**/*.json,**/*.cmd"/>

  <macrodef name="release-locate">
    <sequential>
      <copy file="CHANGES" tofile="CHANGES.tmp" overwrite="true"/>
      <replaceregexp file="CHANGES.tmp"
          match="(?s)^\s*([\d\.x]+) (\d{4})([\dx]+).*$" flags="g" byline="false"
          replace="release.version=\1&#x000D;release.year=\2&#x000D;release.date=\2\3&#x000D;"/>
      <replaceregexp file="CHANGES.tmp" match="x+" replace="0000" flags="g" byline="false"/>
      <loadproperties>
        <file file="CHANGES.tmp"/>
      </loadproperties>
      <delete file="CHANGES.tmp"/>
      <echo file="CHANGES.tmp" message="release.major=${release.version}"/>
      <replaceregexp file="CHANGES.tmp"
          match="(?&lt;=\d+)\." byline="true" replace="&#x000D;release.minor="/>
      <replaceregexp file="CHANGES.tmp"
          match="(?&lt;=\d+)\." byline="true" replace="&#x000D;release.patch="/>
      <loadproperties>
        <file file="CHANGES.tmp"/>
      </loadproperties>
      <delete file="CHANGES.tmp"/>
    </sequential>
  </macrodef>

  <macrodef name="release-insert">
    <attribute name="target"/>
    <attribute name="version" default="${release.version} ${release.date}"/>
    <sequential>
      <echo file="release-info.tmp" message="@{version}"/>
      <replaceregexp file="release-info.tmp" match="[^\d\.\s]" replace="0" flags="g"/>
      <replaceregexp file="release-info.tmp" match="^([^\s]+)\s+(\d{4})(\d{4})"
          replace="release.info.version=\1&#x000D;release.info.year=\2&#x000D;release.info.date=\2\3&#x000D;"/>
      <local name="release.info.version"/>
      <local name="release.info.year"/>
      <local name="release.info.date"/>
      <loadproperties srcfile="release-info.tmp"/>
      <delete file="release-info.tmp"/>

      <!-- [Version 0.0.0 00000000] -->
      <replaceregexp
          match="([Version)\s+\d+\.[\d\.]+\s+\d{8}\(])" flags="g" byline="false"
          replace="\1 ${release.info.version} ${release.info.date}\2">
        <fileset dir="@{target}" includes="${filter}"/>
      </replaceregexp>
      <!-- "name": "...", "version": "0.0.0", -->
      <replaceregexp
          match="(\x22name\x22:\s+\x22xmex\x22,\s+\x22version\x22:\s+\x22)\d+(?:\.\d)+(\x22)" flags="g" byline="false"
          replace="\1${release.info.version}\2">
        <fileset dir="@{target}" includes="${filter}"/>
      </replaceregexp>
      <!-- Copyright (C) 0000 Seanox Software Solutions -->
      <replaceregexp
          match="(Copyright\s+\(C\))\s+\d{4}\s+(Seanox\s+Software\s+Solutions)" flags="g" byline="false"
          replace="\1 ${release.info.year} \2">
        <fileset dir="@{target}" includes="${filter}"/>
      </replaceregexp>
    </sequential>
  </macrodef>

  <macrodef name="release-info-reset">
    <sequential>
      <release-info-insert version="0.0.0 00000000"/>
    </sequential>
  </macrodef>

  <macrodef name="compress-js">
    <attribute name="file"/>
    <attribute name="trace"/>
    <sequential>
      <echo>Compressing: @{file}</echo>
      <!--
        Remove all block comments if they start at the beginning of the line,
        ignore spaces before and that twice, because block comments expose other
        block comments :-|
      -->
      <basename property="script" file="@{file}"/>
      <copy file="@{file}" tofile="@{trace}/${script}_0" overwrite="true"/>
      <copy file="@{trace}/${script}_0" tofile="@{trace}/${script}_1" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_1" encoding="UTF-8" flags="g" byline="false"
          match="(?s)(^|\R)\s*/\*.*?\*/"
          replace="\1"/>
      <replaceregexp file="@{trace}/${script}_1" encoding="UTF-8" flags="g" byline="false"
          match="(?s)(^|\R)\s*/\*.*?\*/"
          replace="\1"/>
      <!-- remove all line comments if they start at the beginning of the line, ignore spaces before -->
      <copy file="@{trace}/${script}_1" tofile="@{trace}/${script}_2" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_2" encoding="UTF-8" flags="g" byline="true"
          match="^\s*//.*$"
          replace=""/>
      <copy file="@{trace}/${script}_2" tofile="@{trace}/${script}_3" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_3" encoding="UTF-8" flags="g" byline="true"
          match="^\s+//.*$"
          replace=""/>
      <!-- remove all line comments outside literals -->
      <copy file="@{trace}/${script}_3" tofile="@{trace}/${script}_4" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_4" encoding="UTF-8" flags="g" byline="true"
          match="^((?:(?:&#34;.*?&#34;)|(?:'.*?')|(?:´.*?´)){0,}[^&#34;'´\r\n]*?)(?&lt;=[\&amp;\|\+\-\*/=,;(){}])//.*$"
          replace="\1"/>
      <!-- combining of the line breaks -->
      <copy file="@{trace}/${script}_4" tofile="@{trace}/${script}_5" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_5" encoding="UTF-8" flags="g" byline="false"
          match="(?s)(\s*\R)+"
          replace="&#13;"/>
      <copy file="@{trace}/${script}_5" tofile="@{trace}/${script}_6" overwrite="true"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <replaceregexp file="@{trace}/${script}_6" encoding="UTF-8" flags="g" byline="true"
          match="^(\t*)(\x20{4})"
          replace="\1&#09;"/>
      <copy file="@{trace}/${script}_6" tofile="@{file}" overwrite="true"/>
    </sequential>
  </macrodef>

  <target name="changes">
    <release-locate/>

    <replaceregexp file="${workspace}/CHANGES" match="&#x00E4;" replace="ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00C4;" replace="Ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00F6;" replace="oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00D6;" replace="Oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00FC;" replace="ue" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00DC;" replace="Ue" flags="g"/>

    <copy file="${workspace}/CHANGES" tofile="${workspace}/CHANGES.tmp" overwrite="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^\s+" replace="" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="(?s)^(.*?)[\r\n]+\d[\d\. x]+.*$" replace="\1" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(.*?)\s*$" replace="\1  " flags="g" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(\d[\.\d x]+)[^\r\n]*" replace="## \1" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^ {0,4}([A-Z]+:.*)\s*$" replace="\1" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="(?s)[\r\n]+ [^\r\n]+" replace="" flags="g" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(## \d[\.\d]+ \d+)(  )" replace="\1\2" flags="g" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(## \d[\.\d]+ \d+x+)(  )" replace="\1 (upcoming version)\2" flags="g" byline="true"/>
    <loadresource property="changes">
      <file file="${workspace}/CHANGES.tmp"/>
    </loadresource>
    <delete file="${workspace}/CHANGES.tmp"/>
    <replaceregexp file="${workspace}/README.md"
        match="(?si)(# Changes\s+).*?(\[Read more\])" flags="g" byline="false"
        replace="\1${changes}${line.separator}${line.separator}\2"/>
    <tstamp>
      <format property="now.year" pattern="yyyy"/>
    </tstamp>
    <replaceregexp file="${workspace}/README.md"
        match="(?si)(?&lt;=\(C\)\s)\d{4}\b" flags="g" byline="true"
        replace="${now.year}"/>
  </target>

  <target name="install" depends="changes">
    <unzip src="${development}/libxml2-2.9.3_win_x64.zip" dest="${sources}" overwrite="true"/>
  </target>






  <target name="release" depends="changes">
    <release-locate/>
    <release-insert target="${workspace}"/>

    <delete dir="${trace}"/>
    <mkdir dir="${trace}"/>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true"
        output="${trace}/npm-stdout.log" error="${trace}/npm-stderr.log">
      <arg value="/c npm run build"/>
    </exec>
    <echo file="${trace}/npm-stdout.log" append="true" message="&#09;"/>
    <replaceregexp file="${trace}/npm-stdout.log" flags="g" byline="false"
        match="\x1B\[\d+m" replace=""/>
    <loadfile srcfile="${trace}/npm-stdout.log" property="npm.stdout"/>
    <echo message="${npm.stdout}"/>
    <echo file="${trace}/npm-stderr.log" append="true" message="&#09;"/>
    <replaceregexp file="${trace}/npm-stderr.log" flags="g" byline="false"
        match="\x1B\[\d+m" replace=""/>
    <loadfile srcfile="${trace}/npm-stderr.log" property="npm.stderr"/>
    <echo message="${npm.stderr}"/>
    <fail message="&lt;npm run build&gt; failed">
      <condition>
        <not>
          <available file="${sources}/service-build.js"/>
        </not>
      </condition>
    </fail>

    <compress-js file="${sources}/service-build.js" trace="${trace}"/>
    <copy file="${sources}/service-build.js" tofile="${sources}/service-build-test.js" overwrite="true"/>
    <replaceregexp file="${sources}/service-build.js" encoding="UTF-8" flags="g" byline="false"
        match="(?s)[\r\n]+\s*\{{3,}.*?\}{3,}"
        replace=""/>
    <delete dir="${build}"/>
    <mkdir dir="${build}"/>
    <copy file="${sources}/service-build.js" tofile="${build}/service.js" overwrite="true"/>
    <copy file="${sources}/service-build.js" todir="${build}" overwrite="true"/>
    <copy file="${sources}/service-build-test.js" todir="${build}" overwrite="true"/>
    <copy file="${sources}/service.ini" tofile="${build}/service.ini" overwrite="true"/>
    <copy file="${workspace}/package.json" tofile="${build}/package.json" overwrite="true"/>
    <copy file="${workspace}/LICENSE" todir="${build}" overwrite="true"/>
    <copy file="${workspace}/CHANGES" todir="${build}" overwrite="true"/>
    <release-insert target="${build}"/>
    <move file="${build}/service-build.js" todir="${sources}" overwrite="true"/>
    <move file="${build}/service-build-test.js" todir="${sources}" overwrite="true"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${build}" includes="**/*"/>
    </touch>

    <delete file="${release}/seanox-${ant.project.name}-${release.version}.zip"/>
    <delete file="${release}/seanox-${ant.project.name}-latest.zip"/>
    <zip basedir="${build}" destfile="${release}/seanox-${ant.project.name}-${release.version}.zip"/>
    <copy file="${release}/seanox-${ant.project.name}-${release.version}.zip" tofile="${release}/seanox-${ant.project.name}-latest.zip" overwrite="true"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${release}" includes="seanox-${ant.project.name}*.zip"/>
    </touch>

    <docker-build target="integration"/>
    <docker-build target="release"/>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c"/>
      <arg value="docker"/>
      <arg value="build"/>
      <arg value="-t"/>
      <arg value="${ant.project.name}:${release.version}"/>
      <arg value="-t"/>
      <arg value="seanox/${ant.project.name}:${release.version}"/>
      <arg value="-t"/>
      <arg value="${ant.project.name}:latest"/>
      <arg value="-t"/>
      <arg value="seanox/${ant.project.name}:latest"/>
      <arg value="--target"/>
      <arg value="release"/>
      <arg value="."/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c docker images --filter=reference=seanox/${ant.project.name} --filter=reference=${ant.project.name}"/>
    </exec>

    <delete dir="${build}-win"/>
    <mkdir dir="${build}-win"/>
    <mkdir dir="${build}-win/data"/>
    <mkdir dir="${build}-win/logs"/>
    <mkdir dir="${build}-win/node"/>
    <copy todir="${build}-win">
      <fileset dir="${build}" includes="**/*"/>
    </copy>
    <copy file="${sources}/service.cmd" todir="${build}-win"/>
    <unzip src="${development}/libxml2-2.9.3_win_x64.zip" dest="${build}-win"/>
    <copy file="${development}/libxml2-2.9.3_win_x64.license" tofile="${build}-win/libxml2/license"/>
    <unzip src="${development}/nssm-2.24.zip" dest="${build}-win/nssm"/>
    <copy file="${build}-win/nssm/nssm-2.24/win64/nssm.exe" todir="${build}-win/nssm"/>
    <copy file="${build}-win/nssm/nssm-2.24/ChangeLog.txt" todir="${build}-win/nssm"/>
    <copy file="${build}-win/nssm/nssm-2.24/README.txt" todir="${build}-win/nssm"/>
    <copy file="${development}/nssm-2.24.license" tofile="${build}-win/nssm/LICENSE"/>
    <delete dir="${build}-win/nssm/nssm-2.24"/>
    <release-insert target="${build}-win"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${build}-win" includes="**/*"/>
    </touch>

    <delete file="${release}/seanox-${ant.project.name}-${release.version}-win.zip"/>
    <delete file="${release}/seanox-${ant.project.name}-win-latest.zip"/>
    <zip basedir="${build}-win" destfile="${release}/seanox-${ant.project.name}-${release.version}-win.zip"/>
    <copy file="${release}/seanox-${ant.project.name}-${release.version}-win.zip" tofile="${release}/seanox-${ant.project.name}-win-latest.zip" overwrite="true"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${release}" includes="seanox-${ant.project.name}*.zip"/>
    </touch>

    <release-info-reset/>

    <replaceregexp file="${workspace}/README.md"
        match="(Seanox\s+XML-Micro-Exchange\s+)\d+[\.\d]+" flags="g" byline="false"
        replace="\1${release.version}"/>
    <replaceregexp file="${workspace}/README.md"
        match="(seanox-${ant.project.name}-)\d+[\.\d]+((?:-win)*\.zip)" flags="g" byline="false"
        replace="\1${release.version}\2"/>
    <replaceregexp file="${workspace}/README.md"
        match="(releases/download/)\d+[\.\d]+(/seanox-${ant.project.name})" flags="g" byline="false"
        replace="\1${release.version}\2"/>
    <replaceregexp file="${workspace}/manual/installation.md"
        match="(seanox-${ant.project.name}-)\d+[\.\d]+((?:-win)*\.zip)" flags="g" byline="false"
        replace="\1${release.version}\2"/>
    <replaceregexp file="${workspace}/manual/installation.md"
        match="(releases/download/)\d+[\.\d]+(/seanox-${ant.project.name})" flags="g" byline="false"
        replace="\1${release.version}\2"/>
  </target>

  <macrodef name="docker-build">
    <attribute name="target"/>
    <sequential>
      <exec executable="cmd" failonerror="false" failifexecutionfails="false">
        <arg value="/c docker kill ${ant.project.name}-@{target}"/>
      </exec>
      <exec executable="cmd" failonerror="true" failifexecutionfails="true">
        <arg value="/c docker build -t ${ant.project.name}:@{target} --target @{target} ."/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="docker-run">
    <attribute name="target"/>
    <sequential>
      <exec executable="cmd" failonerror="true" failifexecutionfails="true">
        <arg value="/c docker run -d -p 8000:8000/tcp --rm --name ${ant.project.name}-@{target} ${ant.project.name}:@{target}"/>
      </exec>
      <exec executable="cmd" failonerror="true" failifexecutionfails="true">
        <arg value="/c docker ps"/>
      </exec>
    </sequential>
  </macrodef>

  <target name="docker-test">
    <docker-build target="test"/>
    <docker-run target="test"/>
  </target>
  <target name="docker-integration" depends="release">
    <docker-run target="integration"/>
  </target>
  <target name="docker-integration-trace">
    <exec executable="cmd" failonerror="false" failifexecutionfails="false">
      <arg value="/c docker cp ${ant.project.name}-integration:/${ant.project.name}/trace.log ./sources/trace-docker.log"/>
    </exec>
    <exec executable="cmd" failonerror="false" failifexecutionfails="false">
      <arg value="/c docker cp ${ant.project.name}-integration:/${ant.project.name}/trace-cumulate.http ./sources/trace-cumulate.http"/>
    </exec>
    <replaceregexp file="./sources/trace-cumulate.http" flags="g" byline="false"
        match="172\.[.\d]+" replace="127.0.0.1"/>
  </target>

  <target name="docker-release" depends="release">
    <docker-run target="release"/>
  </target>

  <target name="docker-push-release" depends="release">
    <property environment="env"/>
    <property name="docker.registry" value="${env.docker-registry}"/>
    <property name="docker.id" value="${env.docker-id}"/>
    <property name="docker.password" value="${env.docker-password}"/>
    <property name="docker.fail.message" value="Credentials for Docker Hub are incomplete!${line.separator}"/>
    <fail message="${docker.fail.message}Environmental variable docker-registry is required">
      <condition>
        <or>
          <matches pattern="^\s*\$\{.*$" string="${docker.registry}"/>
          <not><matches pattern="^.*\S.*$" string="${docker.registry}"/></not>
          <not><isset property="docker.registry"/></not>
        </or>
      </condition>
    </fail>
    <fail message="${docker.fail.message}Environmental variable docker-id is required">
      <condition>
        <or>
          <matches pattern="^\s*\$\{.*$" string="${docker.id}"/>
          <not><matches pattern="^.*\S.*$" string="${docker.id}"/></not>
          <not><isset property="docker.id"/></not>
        </or>
      </condition>
    </fail>
    <fail message="${docker.fail.message}Environmental variable docker-password is required">
      <condition>
        <or>
          <matches pattern="^\s*\$\{.*$" string="${docker.password}"/>
          <not><matches pattern="^.*\S.*$" string="${docker.password}"/></not>
          <not><isset property="docker.password"/></not>
        </or>
      </condition>
    </fail>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c docker login -u=${docker.id} -p=${docker.password} ${docker.registry}"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c docker push seanox/${ant.project.name}:latest"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c docker push seanox/${ant.project.name}:${release.version}"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c docker logout"/>
    </exec>
  </target>

  <target name="docker-clean">
    <delete file="${workspace}/sources/trace-docker.log"/>
    <touch file="${workspace}/sources/trace-docker.log"/>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg value="/c docker system prune --all --volumes --force"/>
    </exec>
  </target>

  <target name="clean">
    <delete dir="${workspace}/release/trace"/>
    <delete dir="${workspace}/release/${ant.project.name}"/>
    <delete dir="${workspace}/sources/data"/>
    <delete dir="${workspace}/sources/logs"/>
    <delete file="${workspace}/sources/service-build.js"/>
    <delete file="${workspace}/sources/service-build-test.js"/>

    <delete dir="${workspace}/sources/data"/>
    <delete dir="${workspace}/sources/temp"/>
    <delete file="${workspace}/sources/trace.log"/>
    <touch file="${workspace}/sources/trace.log"/>
  </target>
</project>