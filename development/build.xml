<?xml version="1.0"?>
<project name="xml-micro-exchange" default="usage" basedir="${ant.file}/../..">
  <target name="usage">
    <echo>Following targets are available:                               </echo>
    <echo>                                                               </echo>
    <echo>  changes      Synchronizes README.md with CHANGES.            </echo>
    <echo>                                                               </echo>
    <echo>  test         Combines the unit tests and starts the CLI      </echo>
    <echo>                                                               </echo>
    <echo>  test-report  Combines the unit tests and starts the CLI      </echo>
    <echo>               and output a report file                        </echo>
    <echo>                                                               </echo>
    <echo>  release      Builds the final the release for the            </echo>
    <echo>               distribution                                    </echo>
  </target>
  
  <property name="workspace" value="${basedir}"/>
  <property name="workspace.build" value="${workspace}/build"/>
  <property name="workspace.sources" value="${workspace}/sources"/>
  <property name="workspace.sources.content" value="${workspace.sources}/content"/>
  <property name="workspace.test" value="${workspace}/test"/>
  <property name="workspace.release" value="${workspace}/release"/>
  <property name="workspace.manual" value="${workspace}/manual"/>
  <property name="workspace.development" value="${workspace}/development"/>
  
  <macrodef name="release-locate">
    <sequential>
      <copy file="CHANGES" tofile="CHANGES.tmp" overwrite="true"/>
      <replaceregexp file="CHANGES.tmp"
          match="(?s)^\s*([\d\.x]+) (\d{4})([\dx]+).*$" flags="g" byline="false"
          replace="release.version=\1&#x000D;release.year=\2&#x000D;release.date=\2\3&#x000D;"/>
      <replaceregexp file="CHANGES.tmp" match="x+" replace="0000" flags="g" byline="false"/>
      <loadproperties>
        <file file="CHANGES.tmp"/>
      </loadproperties>
      <delete file="CHANGES.tmp"/>
      <echo file="CHANGES.tmp" message="release.major=${release.version}"/>
      <replaceregexp file="CHANGES.tmp"
          match="(?&lt;=\d+)\." byline="true" replace="&#x000D;release.minor="/>
      <replaceregexp file="CHANGES.tmp"
          match="(?&lt;=\d+)\." byline="true" replace="&#x000D;release.patch="/>
      <loadproperties>
        <file file="CHANGES.tmp"/>
      </loadproperties>
      <delete file="CHANGES.tmp"/>
    </sequential>
  </macrodef>

  <macrodef name="compress-js">
    <attribute name="file"/>
    <sequential>
      <echo>Compressing: @{file}</echo>
      <replaceregexp file="@{file}" match="(?s)\R\x20*/\*\*.*?\*/" replace="" flags="g" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)\R\x20*//[^\r\n]*" replace="" flags="g" byline="false"/>
      <replaceregexp file="@{file}" match="(\x20*\R){3,}" replace="${line.separator}${line.separator}" flags="g" byline="false"/>
      <replaceregexp file="@{file}" match="\s+$" replace="" flags="g" byline="true"/>
      <replaceregexp file="@{file}" match="\s*\R\s*(\R)" replace="\1" flags="g" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)/\*\*.*?\*/" replace="" flags="g" byline="false"/>
    </sequential>
  </macrodef>

  <target name="changes">
    <release-locate/>

    <replaceregexp file="${workspace}/CHANGES" match="&#x00E4;" replace="ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00C4;" replace="Ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00F6;" replace="oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00D6;" replace="Oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00FC;" replace="ue" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00DC;" replace="Ue" flags="g"/>
      
    <copy file="${workspace}/CHANGES" tofile="${workspace}/CHANGES.tmp" overwrite="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^\s+" replace="" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="(?s)^(.*?)[\r\n]+\d[\d\. x]+.*$" replace="\1" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(.*?)\s*$" replace="\1  " flags="g" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(\d[\.\d x]+)[^\r\n]*" replace="## \1" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^ {0,4}([A-Z]+:.*)\s*$" replace="\1" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="(?s)[\r\n]+ [^\r\n]+" replace="" flags="g" byline="false"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(## \d[\.\d]+ \d+)(  )" replace="\1\2" flags="g" byline="true"/>
    <replaceregexp file="${workspace}/CHANGES.tmp" match="^(## \d[\.\d]+ \d+x+)(  )" replace="\1 (upcoming version)\2" flags="g" byline="true"/>
    <loadresource property="changes">
      <file file="${workspace}/CHANGES.tmp"/>
    </loadresource>
    <delete file="${workspace}/CHANGES.tmp"/>
    <replaceregexp file="${workspace}/README.md"
        match="(?si)(# Changes\s+).*?(\[Read more\])" flags="g" byline="false"
        replace="\1${changes}${line.separator}${line.separator}\2"/>
    <tstamp>
      <format property="now.year" pattern="yyyy"/>
    </tstamp>    
    <replaceregexp file="${workspace}/README.md"
        match="(?si)(?&lt;=\(C\)\s)\d{4}\b" flags="g" byline="true"
        replace="${now.year}"/>
    <replaceregexp file="${workspace.sources}/openAPI.yaml"
        match="(?si)\b(version: )\d+(\.\d+)*" flags="g" byline="true"
        replace="\1${release.version}"/>
    <replaceregexp file="${workspace}/Dockerfile"
        match="(?si)\b(ARG\s+GIT_REPO_TAG\s*=\s*)\d+[\.\d+]*" flags="g" byline="true"
        replace="\1${release.version}"/>
  </target>

  <macrodef name="exec-npm">
    <element name="args" implicit="yes"/>
    <sequential>
      <exec executable="cmd.exe" failonerror="true" osfamily="windows" logError="true">
        <arg line="/c npm"/>
        <args/>
      </exec>
      <exec executable="npm" failonerror="true" osfamily="unix" logError="true">
        <args/>
      </exec>
    </sequential>
  </macrodef>

  <target name="release" depends="changes">
    <release-locate/>

    <delete dir="${workspace.build}"/>
    <mkdir dir="${workspace.build}"/>
    <copy file="${workspace}/LICENSE" todir="${workspace.build}"/>
    <copy file="${workspace}/CHANGES" todir="${workspace.build}"/>
    <copy todir="${workspace.build}">
      <fileset dir="${workspace.sources}">
        <include name="service.js"/>
      </fileset>
    </copy>
    <compress-js file="${workspace.build}/service.js"/>
    <copy todir="${workspace.build}/manual">
      <fileset dir="${workspace.manual}" includes="**"/>
    </copy>
    <copy todir="${workspace.build}/content">
      <fileset dir="${workspace.sources.content}">
        <include name="openAPI.html"/>
        <include name="openAPI.yaml"/>
        <include name="snake.html"/>
      </fileset>
    </copy>
    <mkdir dir="${workspace.build}/data"/>
    <replaceregexp file="${workspace.build}/content/openAPI.yaml"
        match="(?i)(version: )\d[\.\d]+" flags="g" byline="true"
        replace="\1${release.version}"/>
    <replaceregexp file="${workspace.build}/service.js"
        match="(?i)(Version )\d[\.\d]+\s+(\d{8})" flags="g" byline="true"
        replace="\1${release.version} ${release.date}"/>
    <replaceregexp file="${workspace.build}/service.js"
        match="(?i)(Copyright \(C\))\s+\d{4}" flags="g" byline="true"
        replace="\1 ${release.year}"/>
    <exec-npm>
      <arg value="run"/>
      <arg value="build"/>
    </exec-npm>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${workspace.build}"/>
    </touch>

    <delete dir="${workspace.release}"/>
    <mkdir dir="${workspace.release}"/>
    <zip destfile="${workspace.release}/seanox-xmex-${release.version}.zip"
        compress="true" filesonly="true" defaultexcludes="false"
        basedir="${workspace.build}"/>
    <copy file="${workspace.release}/seanox-xmex-${release.version}.zip"
        tofile="${workspace.release}/seanox-xmex-latest.zip"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${workspace.release}" includes="*.zip"/>
    </touch>

    <copy file="${workspace.sources}/service.cmd" todir="${workspace.build}"/>
    <replaceregexp file="${workspace.build}/service.cmd"
        match="(?i)(Version )\d[\.\d]+\s+(\d{8})" flags="g" byline="true"
        replace="\1${release.version} ${release.date}"/>
    <replaceregexp file="${workspace.build}/service.cmd"
        match="(?i)(Copyright \(C\))\s+\d{4}" flags="g" byline="true"
        replace="\1 ${release.year}"/>
    <unzip src="${workspace.development}/libxml2-2.9.3_win_x64.zip" dest="${workspace.build}"/>
    <move file="${workspace.build}/libxml2" tofile="${workspace.build}/libxml"/>
    <copy file="${workspace.development}/libxml2-2.9.3_win_x64.license" tofile="${workspace.build}/libxml.license"/>
    <unzip src="${workspace.development}/nssm-2.24.zip" dest="${workspace.build}"/>
    <move file="${workspace.build}/nssm-2.24/win64/nssm.exe" todir="${workspace.build}"/>
    <delete dir="${workspace.build}/nssm-2.24"/>
    <copy file="${workspace.development}/nssm-2.24.license" tofile="${workspace.build}/nssm.license"/>

    <zip destfile="${workspace.release}/seanox-xmex-${release.version}-win.zip"
        compress="true" filesonly="true" defaultexcludes="false"
        basedir="${workspace.build}"/>
    <copy file="${workspace.release}/seanox-xmex-${release.version}-win.zip"
        tofile="${workspace.release}/seanox-xmex-win-latest.zip"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${workspace.release}" includes="*.zip"/>
    </touch>

    <delete dir="${workspace.build}"/>

    <replaceregexp file="${workspace}/README.md"
        match="(Seanox\s+XML-Micro-Exchange\s+)\d+[\.\d]+" flags="g" byline="false"
        replace="\1${release.version}"/>
    <replaceregexp file="${workspace}/README.md"
        match="(seanox/${ant.project.name}-js/releases/download/)\d[\d\.]+"
        replace="\1${release.version}" flags="g" byline="false"/>
    <replaceregexp file="${workspace}/README.md"
        match="(seanox-xmex-)\d+[\.\d]+(\.zip)" flags="g" byline="false"
        replace="\1${release.version}\2"/>
  </target>

  <!--
      https://www.jetbrains.com/ijhttp/download/#section=zip-archive
      https://www.jetbrains.com/help/idea/http-client-cli.html
  -->
  <path id="classpath.httpclient">
    <fileset dir="${workspace.test}/cli/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <macrodef name="load-test-cases">
    <sequential>
      <echo file="___temp" force="true">
        ${workspace.test}/connect.http
        ${workspace.test}/content.http
        ${workspace.test}/delete_attribute.http
        ${workspace.test}/delete_element.http
        ${workspace.test}/delete_element_pseudo.http
        ${workspace.test}/get.http
        ${workspace.test}/getting_started.http
        ${workspace.test}/options.http
        ${workspace.test}/patch_attribute.http
        ${workspace.test}/patch_element.http
        ${workspace.test}/patch_text.http
        ${workspace.test}/post.http
        ${workspace.test}/put_attribute.http
        ${workspace.test}/put_connect.http
        ${workspace.test}/put_element.http
        ${workspace.test}/put_element_pseudo.http
        ${workspace.test}/put_text.http
        ${workspace.test}/request.http
        ${workspace.test}/snake.http
      </echo>
      <replaceregexp file="___temp" match="(?s)\s+" flags="g" byline="false" replace=" "/>
      <replaceregexp file="___temp" match="(^\s+)|(\s$)" flags="g" byline="false" replace=""/>
      <loadfile property="test.cases" srcFile="___temp"/>
      <delete file="___temp"/>
    </sequential>
  </macrodef>

  <macrodef name="load-test-cli">
    <sequential>
      <get src="https://download.jetbrains.com/resources/intellij/http-client/233.11799.241/intellij-http-client.zip"
          dest="${workspace.test}/cli.zip" skipexisting="true"/>
      <delete dir="${workspace.test}/cli"/>
      <unzip src="${workspace.test}/cli.zip" dest="${workspace.test}"/>
      <move file="${workspace.test}/ijhttp" tofile="${workspace.test}/cli"/>
    </sequential>
  </macrodef>

  <target name="test">
    <load-test-cases/>
    <load-test-cli/>
    <delete dir="${workspace.sources}/data"/>
    <java classname="com.intellij.httpClient.cli.HttpClientMain">
      <classpath refid="classpath.httpclient"/>
      <arg line="--env-file ${workspace.test}/http-client.env.json"/>
      <arg line="--env local"/>
      <arg line="${test.cases}"/>
    </java>
  </target>

  <target name="test-report">
    <load-test-cases/>
    <load-test-cli/>
    <delete dir="${workspace.sources}/data"/>
    <tstamp>
      <format property="timestamp" pattern="yyyyMMddHHmmss"/>
    </tstamp>
    <property name="output" value="${workspace.test}/${timestamp}.txt"/>
    <java classname="com.intellij.httpClient.cli.HttpClientMain" fork="true" output="${output}">
      <classpath refid="classpath.httpclient"/>
      <arg line="--log-level VERBOSE"/>
      <arg line="--env-file ${workspace.test}/http-client.env.json"/>
      <arg line="--env local"/>
      <arg line="${test.cases}"/>
    </java>
    <replaceregexp file="${output}" flags="g" byline="false"
        match="\u001B.*?m" replace=""/>
    <replaceregexp file="${output}" byline="false"
        match="(?s)^.*?\R(?=Request)" replace=""/>
    <replaceregexp file="${output}" flags="g" byline="false"
        match="(?s)\R(Date|Storage-Last-Modified|Storage-Expiration|Execution-Time):\s.*?(?=\R)" replace=""/>
    <replaceregexp file="${output}" flags="g" byline="false"
        match="(?&lt;=;)\s+Time:.*?;" replace=""/>
  </target>

  <target name="publish" depends="release">
    <input message="Publish version ${release.version}? (y)es/(n)o:" validargs="y,n" addproperty="release.release.input"/>
    <fail message="Canceled">
      <condition>
        <equals arg1="${release.release.input}" arg2="n"/>
      </condition>
    </fail>
    <property environment="env"/>
    <property name="docker.registry" value="${env.docker-registry}"/>
    <property name="docker.id" value="${env.docker-id}"/>
    <property name="docker.password" value="${env.docker-password}"/>
    <property name="docker.fail.message" value="Credentials for Docker Hub are incomplete!${line.separator}"/>
    <fail message="${docker.fail.message}Environmental variable docker-registry is required">
      <condition>
        <or>
          <matches pattern="^\s*\$\{.*$" string="${docker.registry}"/>
          <not><matches pattern="^.*\S.*$" string="${docker.registry}"/></not>
          <not><isset property="docker.registry"/></not>
        </or>
      </condition>
    </fail>
    <fail message="${docker.fail.message}Environmental variable docker-id is required">
      <condition>
        <or>
          <matches pattern="^\s*\$\{.*$" string="${docker.id}"/>
          <not><matches pattern="^.*\S.*$" string="${docker.id}"/></not>
          <not><isset property="docker.id"/></not>
        </or>
      </condition>
    </fail>
    <fail message="${docker.fail.message}Environmental variable docker-password is required">
      <condition>
        <or>
          <matches pattern="^\s*\$\{.*$" string="${docker.password}"/>
          <not><matches pattern="^.*\S.*$" string="${docker.password}"/></not>
          <not><isset property="docker.password"/></not>
        </or>
      </condition>
    </fail>

    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker build"/>
      <arg line="-t xmex:${release.version}-js"/>
      <arg line="-t seanox/xmex:${release.version}-js"/>
      <arg line="-t xmex:js"/>
      <arg line="-t xmex:latest"/>
      <arg line="-t seanox/xmex:js"/>
      <arg line="-t seanox/xmex:latest"/>
      <arg value="."/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker images --filter=reference=seanox/xmex --filter=reference=xmex"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker system prune -f"/>
    </exec>

    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker login -u=${docker.id} -p=${docker.password} ${docker.registry}"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker push seanox/xmex:${release.version}-js"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker push seanox/xmex:js"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker push seanox/xmex:latest"/>
    </exec>
    <exec executable="cmd" failonerror="true" failifexecutionfails="true">
      <arg line="/c docker logout"/>
    </exec>
  </target>
</project>