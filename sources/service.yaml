openapi: 3.0.1
info:
  title: "Seanox XMEX - XML-Micro-Exchange"
  version: "1.4.0"
  description: "
XML-Micro-Exchange is a RESTful volatile NoSQL stateless micro datasource for
the Internet. It is designed for easy communication and data exchange of
web-applications and for IoT or for other Internet-based modules and
components. The XML based datasource is volatile and lives through continuous
use and expires through inactivity. They are designed for active and near
real-time data exchange but not as a real-time capable long-term storage.
Compared to a JSON storage, this datasource supports more dynamics, partial
data access, data transformation, and volatile short-term storage.

<h1>API</h1>
The API uses the HTTP.

The URI typically contains a noticeable separator to divide it into context
path and XPath.

For the API only the XPath is relevant.

<pre>
https://xmex.seanox.com/xmex!xpath(-function)<br>
<-------------------------->|<--------------><br>
&#160;       Context Path              XPath<br>
</pre>

In some cases, the XPath syntax may not be supported as a URI by the client or
provider. In these cases, the XPath can alternatively be used as hexadecimal or
Base64 encoded.

<pre>
https://xmex.seanox.com/xmex!count(//items[@id<0])<br>
https://xmex.seanox.com/xmex!count(%2F%2Fitems[@id<0])<br>
https://xmex.seanox.com/xmex!0x636F756E74282F2F6974656D735B4069643C305D29<br>
https://xmex.seanox.com/xmex!Base64:Y291bnQoLy9pdGVtc1tAaWQ8MF0p<br>
</pre>

The request supports the following additional headers:

<pre>
Storage                    Storage identifier optional with name of the root element<br>
Accept-Effects             Controls the content of Storage Effects header<br>
</pre>

Also the reponse has additional headers:

<pre>
Connection-Unique          Unique ID created by the API to mark client owner data<br>
Storage                    Storage identifier without the name of the root element<br>
Storage-Revision           Current revision of the storage<br>
Storage-Space              Capacity of the storage (total/used in bytes)<br>
Storage-Last-Modified      Timestamp (RFC822) of the last access<br>
Storage-Expiration         Timestamp (RFC822) when the storage will expire<br>
Storage-Expiration-Time    Idle time in milliseconds until storage expires<br>
Storage-Effects            For PUT/PATCH/DELETE, UUIDs directly affected by the request<br>
Execution-Time             Duration of request processing in milliseconds<br>
Error                      Unique error number from the logging with status 500<br>
Message                    Detailed error message with status 400 / 422
</pre>
<b>
  Notice about response code 404: This always refers to the storage, but never
  to an addressed target in the storage.<br>
  If a target does not exist, requests are responded to with code 204.
</b>

<h2>Usage</h2>
<ol>
  <li>
    <p>
      The storage must be opened by OPTIONS.<br>
      This can be done by any client, even if the storage already exists. The
      response then contains the header <code>Connection-Unique</code>. This is unique
      across all storages and can be used by the client to identify its own data
      in the storage. But this is optional and <code>Connection-Unique</code> is neither
      assigned to the client nor to the connection, it is just a unique value.
    </p>
  </li>
  <li>
    <p>
      The client should always proceed as if it were using storage alone and
      created the schema it needs.<br>
      The creation of the schema is done with PUT. Relative and conditional axes
      should be used as targets. This ensures that no duplicates are created or
      data is overwritten.<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          e.g. <code>PUT /books[not(book[@title='A Modern Utopia'])]::last</code><br>
      This approach made transactions unnecessary.
    </p>
  </li>
  <li>
    <p>
      Now the client can use the storage.
    </p>
  </li>
  <li>
    <p>
      Closing or terminating the storage is not possible and required.<br>
      The storage expires automatically due to inactivity. The duration of use
      and expiration time of the storage is contained in the response in the
      headers <code>Storage-Last-Modified</code>, <code>Storage-Expiration</code>,
      <code>Storage-Expiration-Time</code>.
    </p>
  </li>
</ol>
<br>
  "
  termsOfService: "https://xmex.seanox.com/terms.html"
  contact:
    email: "xmex@seanox.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: Find out more about Seanox XMEX (incl. Manual and Getting Started)
  url: https://github.com/seanox/xml-micro-exchange-js/blob/main/manual/README.md
servers:
  - url: https://xmex.seanox.com
  - url: http://127.0.0.1:8000
tags:
  - name: "API"
paths:
  /xmex!:
    options:
      tags:
        - API
      summary: "
          Opens a storage for use and/or queries the current informations about the storage.
        "
      description: "
          OPTIONS is used for several things. Without an XPath, the method opens a
          storage for use and queries information about the storage. Requests with the
          OPTIONS method are always answered without a response body. All information
          about the storage is returned via response headers. The response always
          contains a Connection-Unique header. This is unique in the datasource and in
          the storage and can be used by the client, e.g. in XML, as an attribute to find
          its data more faster.<br>
          <br>
          <b>
            Before a storage can be used, it must always be opened with an OPTIONS
            request and without an XPath.
          </b><br>
          <br>
          In addition, OPTIONS without XPath is also used as a prefetch for CORS. For
          this purpose the request header Storage is not required and the request is
          responded with status 200.

          <h2>Request</h2>
          <pre>
          OPTIONS / HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)
          </pre>
          <pre>
          OPTIONS / HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ root (identifier / root)
          </pre>

          <h3>Example</h3>
          <pre>
          OPTIONS / HTTP/1.0<br>
          Storage: BookReview
          </pre>
          <pre>
          OPTIONS / HTTP/1.0<br>
          Storage: BookReview books
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 201 Created<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)<br>
          Connection-Unique: UID
          </pre>
          <pre>
          HTTP/1.0 204 No Content<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)<br>
          Connection-Unique: UID
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 201 Resource Created<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 0<br>
          Storage-Space: 262144/87 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Connection-Unique: ABI0ZX99X13M<br>
          Execution-Time: 3 ms
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
              <br>
              Special case CORS.<br>
              The request header Storage is normally always required. However,
              it is not required for the CORS preflight-request. Therefore, the
              header has been decalarized as non-optional.
            "
          required: false
          schema:
            type: string
            example: BookReview books
      responses:
        201:
          description: "Storage was newly created."
        204:
          description: "
              Storage already exists<br>
              or CORS Access-Control preflight request .
            "
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed.
            "
        404:
          description: "Storage does not exist."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
        507:
          description: "Storage is full"
  /xmex!{xpath}:
    options:
      tags:
        - API
      summary: "
          Gets information about the storage and/or a target addressed by XPath.
        "
      description: "
          OPTIONS is used to query the allowed HTTP methods for an XPath, which is
          responded with the Allow-header. This method distinguishes between XPath axis
          and XPath function and uses different Allow headers. Also the existence of the
          target on an XPath axis has an influence on the response. The method will not
          use status 404 in relation to non-existing targets, but will offer the methods
          <code>OPTIONS</code>, <code>PUT</code> via Allow-Header.<br>
          <br>
          In the case of an XPath axis, the UIDs of the targets are returned in the
          Storage-Effects header. Unlike modifier methods like <code>PUT</code>, <code>PATCH</code> and
          <code>DELETE</code>, the effect suffix (<code>:A</code>/<code>:M</code>/<code>:D</code>) is omitted here.<br>
          <br>
          If the XPath is a function, it is executed and thus validated, but without
          returning the result.<br>
          <br>
          The XPath processing is strict and does not accept unnecessary spaces.<br>
          Faulty XPath will cause the status 400.

          <h2>Request</h2>
          <pre>
          OPTIONS /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)
          </pre>

          <h3>Example</h3>
          <pre>
          OPTIONS /xmex!/books/book HTTP/1.0<br>
          Storage: BookReview books
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 204 Success<br>
          Storage-Effects: ... (list of UIDs)<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 204 No Content<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage-Effects: KHDCPS0013C2:0 KHDCPS0013C2:13 KHDCPS0013C2:26<br>
          Allow: OPTIONS, GET, POST, PUT, PATCH, DELETE<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Execution-Time: 4 ms
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      responses:
        204:
          description: "Request was successfully executed."
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed<br>
              or XPath is used from PATH_INFO, not the request URI.
            "
        404:
          description: "Storage does not exist."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
    put:
      tags:
        - API
      summary: "
          Creates elements and attributes in storage and/or changes the value of existing ones
        "
      description: "
          PUT creates elements and attributes in storage and/or changes the value of
          existing ones. The position for the insert is defined via an XPath. For better
          understanding, the method should be called PUT INTO, because it is always based
          on an existing XPath axis as the parent target. XPath uses different notations
          for elements and attributes.<br>
          <br>
          The notation for attributes use the following structure at the end.<br>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
              <code>&lt;XPath&gt;/@&lt;attribute&gt;</code> or <code>&lt;XPath&gt;/attribute::&lt;attribute&gt;</code><br>
          The attribute values can be static (text) and dynamic (XPath function). Values
          are send as request-body.<br>
          <br>
          If the XPath notation does not match the attributes, elements are assumed. For
          elements, the notation for pseudo elements is supported:<br>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
              <code>&lt;XPath&gt;::first</code>, <code>&lt;XPath&gt;::last</code>, <code>&lt;XPath&gt;::before</code> or <code>&lt;XPath&gt;::after</code><br>
          Pseudo elements are a relative position specification to the selected element.<br>
          <br>
          The value of elements can be static (text), dynamic (XPath function) or be an
          XML structure. Also here the value is send with the request-body.<br>
          <br>
          The PUT method works resolutely and inserts or overwrites existing data. The
          XPath processing is strict and does not accept unnecessary spaces. The
          attributes <code>___rev</code> / <code>___uid</code> used internally by the storage are read-only and
          cannot be changed.<br>
          <br>
          In general, PUT requests are responded to with status 204. Status 404 is used
          only with relation to the storage. In all other cases the PUT method informs
          the client about changes also with status 204 and the response headers
          <code>Storage-Effects</code> and <code>Storage-Revision</code>. The header <code>Storage-Effects</code> contains
          a list of the UIDs that were directly affected by the change and also contains
          the UIDs of newly created elements. If no changes were made because the XPath
          cannot find a writable target, the header <code>Storage-Effects</code> can be omitted
          completely in the response.<br>
          <br>
          Syntactic and semantic errors in the request and/or XPath and/or value can cause
          error status 400 and 415. If errors occur due to the transmitted request body,
          this causes status 422.

          <h2>Request</h2>
          <pre>
          PUT /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: application/xml<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body:<br>
          XML structure
          </pre>
          <pre>
          PUT /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: text/plain<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body:<br>
          Value as plain text
          </pre>
          <pre>
          PUT /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: text/xpath<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body:<br>
          Value as XPath function
          </pre>

          <h3>Example</h3>
          <pre>
          PUT /xmex!/books/attribute::genre HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: text/plain<br>
          Content-Length: 5<br>
          <br>
          Value
          </pre>
          <pre>
          PUT /xmex!/books/@genre HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: text/xpath<br>
          Content-Length: 25<br>
          <br>
          concat(name(/*), \"-Test\")
          </pre>
          <pre>
          PUT /xmex!/books HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: application/xml<br>
          Content-Length: 70<br>
          <br>
          &lt;book title=\"Book A\"/&gt;<br>
          &lt;book title=\"Book B\"/&gt;<br>
          &lt;book title=\"Book C\"/&gt;
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 204 No Content<br>
          Storage-Effects: &#46;&#46;&#46; (list of UIDs)<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 204 No Content<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Storage-Effects: KHDCPS0018U4:0 KHDCPS0018U2:0 KHDCPS0018U4:1 KHDCPS0018U4:2<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Execution-Time: 3 ms<br>
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: "/books"
      requestBody:
        description: "
            The attribute values can be static (text) and dynamic (XPath function). Values
            are send as request-body. Whether they are used as text or XPath function is
            decided by the Content-Type header of the request:
            <ul>
              <li><code>text/plain</code> Static text</li>
              <li><code>text/xpath</code> XPath function</li>
            </ul>
            <br>
            The value of elements can be static (text), dynamic (XPath function) or be an
            XML structure. Also here the value is send with the request-body and the type
            of processing is determined by the Content-Type:
            <ul>
              <li><code>text/plain</code> Static text</li>
              <li><code>text/xpath</code> XPath function</li>
              <li><code>application/xml</code> XML structure</li>
            </ul>
          "
        content:
          application/xml:
            schema:
              type: object
              xml:
                name: "comment"
              example: "
                  <!-- XML fragments are expected, see examples in description -->\n
                  <book title=\"Book A\"/>\n
                  <book title=\"Book B\"/>\n
                  <book title=\"Book C\"/>
                "
          text/plain:
            schema:
              example: "Value"
          text/xpath:
            schema:
              example: "concat(name(/*), \"-Test\")"
      responses:
        204:
          description: "
              Attributes successfully created or set<br>
              or  Write access to read-only attributes does not cause status 403, because a
              XPath can be multi-dimensional this is difficult, so the server status
              quits the success of the method and the `Storage-Effects` header the effects.
            "
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed.
            "
        404:
          description: "Storage does not exist."
        413:
          description: "Allowed size of the request(-body) and/or storage is exceeded."
        415:
          description: "Attribute request without Content-Type text/plain."
        422:
          description: "Data in the request body cannot be processed."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
    patch:
      tags:
        - API
      summary: "
          Changes existing elements and attributes in storage
        "
      description: "
          PATCH changes existing elements and attributes in storage. The position for the
          insert is defined via an XPath. The method works almost like PUT, but the XPath
          axis of the request always expects an existing target.<br>
          <br>
          XPath uses different notations for elements and attributes.<br>
          <br>
          The notation for attributes use the following structure at the end.<br>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
              <code>&lt;XPath&gt;/@&lt;attribute&gt;</code> or <code>&lt;XPath&gt;/attribute::&lt;attribute&gt;</code><br>
          The attribute values can be static (text) and dynamic (XPath function). Values are send as
          request-body.<br>
          <br>
          If the XPath notation does not match the attributes, elements are assumed.
          Unlike the PUT method, no pseudo elements are supported for elements.<br>
          <br>
          The value of elements can be static (text), dynamic (XPath function) or be an
          XML structure. Also here the value is send with the request-body.<br>
          <br>
          The PATCH method works resolutely and  overwrites existing data. The XPath processing is
          strict and does not accept unnecessary spaces. The attributes <code>___rev</code> / <code>___uid</code> used
          internally by the storage are read-only and cannot be changed.<br>
          <br>
          In general, PATCH requests are responded to with status 204. Status 404 is used
          only with relation to the storage. In all other cases the PATCH method informs
          the client about changes with status 204 and the response headers
          <code>Storage-Effects</code> and <code>Storage-Revision</code>. The header <code>Storage-Effects</code> contains
          a list of the UIDs that were directly affected by the change elements. If no
          changes were made because the XPath cannot find a writable target, the header
          <code>Storage-Effects</code> can be omitted completely in the response.<br>
          <br>
          Syntactic and semantic errors in the request and/or XPath and/or value can cause
          error status 400 and 415. If errors occur due to the transmitted request body,
          this causes status 422.

          <h2>Request</h2>
          <pre>
          PATCH /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: application/xml<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body:<br>
          XML structure
          </pre>
          <pre>
          PATCH /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: text/plain<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body:<br>
          Value as plain text
          </pre>
          <pre>
          PATCH /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: text/xpath<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body:<br>
          Value as XPath function
          </pre>

          <h3>Example</h3>
          <pre>
          PATCH /xmex!/books/attribute::genre HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: text/plain<br>
          Content-Length: 5<br>
          <br>
          Value
          </pre>
          <pre>
          PATCH /xmex!/books/@genre HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: text/xpath<br>
          Content-Length: 25<br>
          <br>
          concat(name(/*), \"-Test\")
          </pre>
          <pre>
          PATCH /xmex!/books HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: application/xml<br>
          Content-Length: 70<br>
          <br>
          &lt;book title=\"Book A\"/&gt;<br>
          &lt;book title=\"Book B\"/&gt;<br>
          &lt;book title=\"Book C\"/&gt;
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 204 No Content<br>
          Storage-Effects: &#46;&#46;&#46; (list of UIDs)<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 204 No Content<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Storage-Effects: KHDCPS0018U4:0 KHDCPS0018U2:0 KHDCPS0018U4:1 KHDCPS0018U4:2<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Execution-Time: 3 ms<br>
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      requestBody:
        description: "
            The attribute values can be static (text) and dynamic (XPath function). Values are send as
            request-body. Whether they are used as text or XPath function is decided by the Content-Type
            header of the request:
            <ul>
              <li><code>text/plain</code> Static text</li>
              <li><code>text/xpath</code> XPath function</li>
            </ul>
            <br>
            The value of elements can be static (text), dynamic (XPath function) or be an
            XML structure. Also here the value is send with the request-body and the type
            of processing is determined by the Content-Type:
            <ul>
              <li><code>text/plain</code> Static text</li>
              <li><code>text/xpath</code> XPath function</li>
              <li><code>application/xml</code> XML structure</li>
            </ul>
          "
        content:
          application/xml:
            schema:
              type: object
              xml:
                name: "comment"
              example: "
                  <!-- XML fragments are expected, see examples in description -->\n
                  <book title=\"Book A\"/>\n
                  <book title=\"Book B\"/>\n
                  <book title=\"Book C\"/>
                "
          text/plain:
            schema:
              example: "Value"
          text/xpath:
            schema:
              example: "concat(name(/*), \"-Test\")"
      responses:
        204:
          description: "
              Attributes successfully created or set<br>
              or Write access to read-only attributes does not cause status 403, because a<br>
              or XPath can be multi-dimensional this is difficult, so the server status
              quits the success of the method and the `Storage-Effects` header the effects.
            "
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed<br>
              or XPath without addressing a target is responded with status 204.
            "
        404:
          description: "Storage does not exist."
        413:
          description: "Allowed size of the request(-body) and/or storage is exceeded."
        415:
          description: "Attribute request without Content-Type text/plain."
        422:
          description: "Data in the request body cannot be processed."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
    get:
      tags:
        - API
      summary: "
           Queries data about XPath axes and functions
         "
      description: "
          GET queries data about XPath axes and functions. For this, the XPath axis or
          function is sent with URI. Depending on whether the request is an XPath axis or
          an XPath function, different Content-Type are used for the response.

          <h2>application/xml</h2>
          When the XPath axis addresses one target, the addressed target is the root
          element of the returned XML structure. If the XPath addresses multiple targets,
          their XML structure is combined in the root element collection.

          <h2>text/plain</h2>
          If the XPath addresses only one attribute, the value is returned as plain text.
          Also the result of XPath functions is returned as plain text. Decimal results
          use float, booleans the values true and false.<br>
          <br>
          The XPath processing is strict and does not accept unnecessary spaces.

          <h2>Request</h2>
          <pre>
          GET /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)
          </pre>

          <h3>Example</h3>
          <pre>
          GET /xmex!/books/attribute::genre HTTP/1.0<br>
          Storage: BookReview books
          </pre>
          <pre>
          GET /xmex!/books/@genre HTTP/1.0<br>
          Storage: BookReview books
          </pre>
          <pre>
          GET /xmex!count(/books/book) HTTP/1.0<br>
          Storage: BookReview books
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 200 Success<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)<br>
          Content-Length: (bytes)<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Response-Body:<br>
          The result of the XPath request
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 200 Success<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Content-Length: 26<br>
          Content-Type: application/xml<br>
          Execution-Time: 4 ms<br>
          <br>
          &lt;?xml version=\"1.0\"?&gt;<br>
          &#46;&#46;&#46;<br>
          </pre>
          <pre>
          HTTP/1.0 200 Success<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Content-Length: 26<br>
          Content-Type: text/plain<br>
          Execution-Time: 4 ms<br>
          <br>
          &#46;&#46;&#46;
          </pre>
         "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      responses:
        200:
          description: "Request was successfully executed."
          content:
            application/xml:
              schema:
                type: object
                example: "TODO:"
            text/plain:
              schema:
                type: string
                example: "Text output, see examples in description"
        204:
          description: "Request was successfully executed but without content."
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed.
            "
        404:
          description: "Storage does not exist."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
    post:
      tags:
        - API
      summary: "
          Queries data about XPath axes and functions via transformation
        "
      description: "
          POST queries data about XPath axes and functions via transformation. For this,
          an XSLT stylesheet is sent with the request-body, which is then applied by the
          XSLT processor to the data in storage. Thus the content type
          <code>application/xslt+xml</code> is always required. The client defines the content type
          for the output with the output-tag and the method-attribute.<br>
          <br>
          The XPath is optional for this method and is used to limit and preselect the
          data. If the XPath addresses one or more attributes as preselection, then tags
          of the same name of these attributes are used, which contain the value of the
          attribute as content.<br>
          <br>
          The processing is strict and does not accept unnecessary spaces.

          <h2>Request</h2>
          <pre>
          POST /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: application/xslt+xml<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body<br>
          XSLT stylesheet
          </pre>

          <h3>Example</h3>
          <pre>
          POST /xmex!/ HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: application/xslt+xml<br>
          Content-Length: 212<br>
          <br>
          &lt;?xml version=\"1.0\"?&gt;<br>
          &lt;xsl:stylesheet version=\"1.0\"<br>
          &nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;<br>
          &nbsp;&nbsp;&lt;xsl:output method=\"xml\"/&gt;<br>
          &nbsp;&nbsp;&lt;xsl:template match=\"/\"&gt;<br>
          &nbsp;&nbsp;&nbsp;&nbsp;&#46;&#46;&#46;<br>
          &nbsp;&nbsp;&lt;/xsl:template&gt;<br>
          &lt;/xsl:stylesheet&gt;<br>
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 200 Success<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)<br>
          Content-Length: (bytes)
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 200 Success<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Content-Length: 26<br>
          Content-Type: application/xml<br>
          Execution-Time: 4 ms<br>
          <br>
          &lt;?xml version=\"1.0\"?&gt;<br>
          &#46;&#46;&#46;
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      requestBody:
        content:
          application/xslt+xml:
            schema:
              type: object
              xml:
                name: "comment"
              example: "<!-- XML fragments are expected, see examples in description -->"
      responses:
        200:
          description: "Request was successfully executed."
          content:
            application/xml:
              schema:
                type: object
                example: "TODO:"
            text/plain:
              schema:
                type: string
                example: "Text output, see examples in description"
            text/html:
              schema:
                type: object
                example: "TODO:"
        204:
          description: "Request was successfully executed but without content."
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed<br>
              or XSLT Stylesheet is erroneous.
            "
        404:
          description: "Storage does not exist."
        415:
          description: "Attribute request without Content-Type text/plain."
        422:
          description: "Data in the request body cannot be processed."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
    delete:
      tags:
        - API
      summary: "
          Deletes elements and attributes in the storage
        "
      description: "
          DELETE deletes elements and attributes in the storage. The position for
          deletion is defined via an XPath.<br>
          <br>
          XPath uses different notations for elements and attributes.<br>
          <br>
          The notation for attributes use the following structure at the end.<br>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
              <code>&lt;XPath&gt;/@&lt;attribute&gt;</code> or <code>&lt;XPath&gt;/attribute::&lt;attribute&gt;</code><br>

          If the XPath notation does not match the attributes, elements are assumed. For
          elements, the notation for pseudo elements is supported:<br>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
              <code>&lt;XPath&gt;::first</code>, <code>&lt;XPath&gt;::last</code>, <code>&lt;XPath&gt;::before</code> or <code>&lt;XPath&gt;::after</code><br>
          Pseudo elements are a relative position specification to the selected element.<br>
          <br>
          The DELETE method works resolutely and deletes existing data. The XPath
          processing is strict and does not accept unnecessary spaces. The attributes
          <code>___rev</code> / <code>___uid</code> used internally by the storage are read-only and cannot be
          changed.<br>
          <br>
          In general, DELETE requests are responded to with status 204. Status 404 is
          used only with relation to the storage. In all other cases the DELETE method
          informs the client about changes with status 204 and the response headers
          <code>Storage-Effects</code> and <code>Storage-Revision</code>. The header <code>Storage-Effects</code> contains
          a list of the UIDs that were directly affected by the change and also contains
          the UIDs of newly created elements (e.g. when the root element is deleted, a
          new one is automatically created). If no changes were made because the XPath
          cannot find a writable target, the header <code>Storage-Effects</code> can be omitted
          completely in the response.<br>
          <br>
          Syntactic and semantic errors in the request and/or XPath can cause error
          status 400.

          <h2>Request</h2>
          <pre>
          DELETE /<xpath> HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)
          </pre>

          <h3>Example</h3>
          <pre>
          DELETE /books/book[1] HTTP/1.0<br>
          Storage: BookReview books
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 204 No Content<br>
          Storage-Effects: ... (list of UIDs)<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.1 204 No Content<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Server: Apache/2.4.43 (Unix)<br>
          Access-Control-Allow-Origin: *<br>
          Storage-Effects: KHDCPS001E7C:9:D KHDCPS001DDS:0:M<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Execution-Time: 7 ms
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      responses:
        204:
          description: "
              Element(s) or attribute(s) successfully deleted<br>
              or Write access to read-only attributes does not cause status 403, because a
              XPath can be multi-dimensional this is difficult, so the server status
              quits the success of the method and the `Storage-Effects` header the effects.
            "
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed.
            "
        404:
          description: "Storage does not exist."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
  /xmex!{xpath}!json:
    get:
      tags:
        - API
      summary: "
           Queries data about XPath axes and functions as JSON output
         "
      description: "
          GET queries data about XPath axes and functions. For this, the XPath axis or
          function is sent with URI. If the XPath addresses multiple targets, their XML
          structure is combined in the root element collection.<br>
          <br>
          With the directive <code>!json</code> at the end of the URL, the content type of the
          response is always <code>application/json</code>.<br>
          <br>
          The XPath processing is strict and does not accept unnecessary spaces.

          <h2>Request</h2>
          <pre>
          GET /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)
          </pre>

          <h3>Example</h3>
          <pre>
          GET /xmex!/books/attribute::genre HTTP/1.0<br>
          Storage: BookReview books
          </pre>
          <pre>
          GET /xmex!/books/@genre HTTP/1.0<br>
          Storage: BookReview books
          </pre>
          <pre>
          GET /xmex!count(/books/book) HTTP/1.0<br>
          Storage: BookReview books
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 200 Success<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)<br>
          Content-Length: (bytes)<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Response-Body:<br>
          The result of the XPath request
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 200 Success<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Content-Length: 26<br>
          Content-Type: application/xml<br>
          Execution-Time: 4 ms<br>
          <br>
          &lt;?xml version=\"1.0\"?&gt;<br>
          &#46;&#46;&#46;<br>
          </pre>
          <pre>
          HTTP/1.0 200 Success<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Content-Length: 26<br>
          Content-Type: text/plain<br>
          Execution-Time: 4 ms<br>
          <br>
          &#46;&#46;&#46;
          </pre>
         "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      responses:
        200:
          description: "Request was successfully executed."
          content:
            application/json:
              schema:
                type: string
                example: "TODO:"
        204:
          description: "Request was successfully executed but without content."
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed.
            "
        404:
          description: "Storage does not exist."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "
    post:
      tags:
        - API
      summary: "
          Queries data about XPath axes and functions via transformation as JSON output
        "
      description: "
          POST queries data about XPath axes and functions via transformation. For this,
          an XSLT stylesheet is sent with the request-body, which is then applied by the
          XSLT processor to the data in storage. Thus the content type
          <code>application/xslt+xml</code> is always required. The client defines the content type
          for the output with the output-tag and the method-attribute.<br>
          <br>
          The XPath is optional for this method and is used to limit and preselect the
          data. If the XPath addresses one or more attributes as preselection, then tags
          of the same name of these attributes are used, which contain the value of the
          attribute as content.<br>
          <br>
          With the directive <code>!json</code> at the end of the URL, XML data and simple data
          types for the response are converted to the content type
          <code>application/json</code>.<br>
          <br>
          The processing is strict and does not accept unnecessary spaces.

          <h2>Request</h2>
          <pre>
          POST /&lt;xpath&gt; HTTP/1.0<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Content-Length: (bytes)<br>
          Content-Type: application/xslt+xml<br>
          &nbsp;&nbsp;&nbsp;&nbsp;Request-Body<br>
          XSLT stylesheet
          </pre>

          <h3>Example</h3>
          <pre>
          POST /xmex!/ HTTP/1.0<br>
          Storage: BookReview books<br>
          Content-Type: application/xslt+xml<br>
          Content-Length: 212<br>
          <br>
          &lt;?xml version=\"1.0\"?&gt;<br>
          &lt;xsl:stylesheet version=\"1.0\"<br>
          &nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;<br>
          &nbsp;&nbsp;&lt;xsl:output method=\"xml\"/&gt;<br>
          &nbsp;&nbsp;&lt;xsl:template match=\"/\"&gt;<br>
          &nbsp;&nbsp;&nbsp;&nbsp;&#46;&#46;&#46;<br>
          &nbsp;&nbsp;&lt;/xsl:template&gt;<br>
          &lt;/xsl:stylesheet&gt;<br>
          </pre>

          <h2>Response</h2>
          <pre>
          HTTP/1.0 200 Success<br>
          Storage: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (identifier)<br>
          Storage-Revision: Revision (number)<br>
          Storage-Space: Total/Used (bytes)<br>
          Storage-Last-Modified: Timestamp (RFC822)<br>
          Storage-Expiration: Timestamp (RFC822)<br>
          Storage-Expiration-Time: Timeout (milliseconds)<br>
          Content-Length: (bytes)
          </pre>

          <h3>Example</h3>
          <pre>
          HTTP/1.0 200 Success<br>
          Date: Wed, 11 Nov 2020 12:00:00 GMT<br>
          Access-Control-Allow-Origin: *<br>
          Storage: BookReview<br>
          Storage-Revision: 123<br>
          Storage-Space: 262144/1363 bytes<br>
          Storage-Last-Modified: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration: Wed, 11 Nov 20 12:00:00 +0000<br>
          Storage-Expiration-Time: 900000 ms<br>
          Content-Length: 26<br>
          Content-Type: application/xml<br>
          Execution-Time: 4 ms<br>
          <br>
          &lt;?xml version=\"1.0\"?&gt;<br>
          &#46;&#46;&#46;
          </pre>
        "
      parameters:
        - name: Storage
          in: header
          description: "
              Each storage has an identifier. The Storage Identifier is used as
              the filename of the corresponding XML file and must be specified
              with each request so that the datasource uses the correct storage.
              Optionally, the storage identifier can be followed by the name of
              the root element of the XML file separated by a space.<br>
              If the root element is not specified, the default 'data' is used.<br>
              <br>
              <b>Important:</b> To use a storage, the storage identifier and name
              of the root element must match.<br>
              <br>
              <b>Pattern:</b> ^(\\w{1,64})(?:\\s+(\\w+))?$<br>
              <br>
              <b>Example:</b> BookReview / BookReview books<br>
            "
          required: true
          schema:
            type: string
            example: BookReview books
        - name: xpath
          in: path
          description: "
              XPath axis or function. Axes always start with a slash, functions do not. This
              is only for the initial distinction from the expression for the interpreter.
              Functions can then also use axes and axes can then also use functions.
              <dir>Example:</dir>
              <pre>
              count(/books/*)<br>
              /books/book[position()>count(//book)-5]
              </pre>
            "
          required: true
          schema:
            type: string
            example: /books
      requestBody:
        content:
          application/xslt+xml:
            schema:
              type: object
              xml:
                name: "comment"
              example: "<!-- XML fragments are expected, see examples in description -->"
      responses:
        200:
          description: "Request was successfully executed."
          content:
            application/json:
              schema:
                type: string
                example: "TODO:"
            text/html:
              schema:
                type: string
                example: "TODO:"
        204:
          description: "Request was successfully executed but without content."
        400:
          description: "
              Storage header is invalid, 1 - 64 characters (0-9A-Z_) are expected<br>
              or XPath is missing or malformed<br>
              or XSLT Stylesheet is erroneous.
            "
        404:
          description: "Storage does not exist."
        415:
          description: "Attribute request without Content-Type text/plain."
        422:
          description: "Data in the request body cannot be processed."
        500:
          description: "
              An unexpected error has occurred. The response contains the response header
              with a unique error number. A corresponding entry exists in the logging.
            "