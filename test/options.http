# Test sequence for OPTIONS requests

# OPTIONS is used to request the functions to an XPath, which is responded
# with the Allow header. This method distinguishes between XPath axis and XPath
# function and uses different Allow headers. Also the existence of the target on
# an XPath axis has an influence on the response. The method will not use status
# 404 in relation to non-existing targets, but will offer the methods CONNECT,
# OPTIONS, PUT via Allow-Header. If the XPath is a function, it is executed and
# thus validated, but without returning the result. The XPath processing is
# strict and does not accept unnecessary spaces. Faulty XPath will cause the
# status 400.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "7d70c4690b9a3d996eef6b35833269ab");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1a3b8937cde8aa40ce5ffe8d389146ec");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# CORS preflight OPTIONS
# Expectations:
# - Status code 204 No Content
# - Access-Control-Allow-Origin: *
# - Access-Control-Allow-Credentials: true
# - Access-Control-Max-Age: 86400
OPTIONS {{service}} HTTP/1.0
Origin: {{origin}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "8aae0e8426a0e3116e2de0a223c243ed");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "34223d26e40f132b47c21f05b4ef6dc4");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Storage is not establish
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "8aae0e8426a0e3116e2de0a223c243ed");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1a3b8937cde8aa40ce5ffe8d389146ec");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
# - Storage-Revision: 1/1
# - Storage-Space: 262144/72 bytes
PUT {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "b064518214ba578ef590d162ae445172");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "eedff17093a01ba01c2b468604fe1999");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "eece7445b364079bf7390ad5912594ed");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "a3134b2905b8b58041036c9f71050030");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Without XPath, OPTIONS generally refers to the storage.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 1/0
# - Storage-Space: 262144/72 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "8aae0e8426a0e3116e2de0a223c243ed");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "918337819cb7cce62bb3982e346f8c97");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/39
# - Storage-Space: 262144/2774 bytes
PUT {{service}}/books HTTP/1.0
Storage: {{storage_options}}
Content-Type: application/xml

<book title="A1">
  <chapter title="Chapter A1-1">
    <paragraph title="Paragraph A1-1-1"/>
    <paragraph title="Paragraph A1-1-2"/>
    <paragraph title="Paragraph A1-1-3"/>
  </chapter>
  <chapter title="Chapter A1-2">
    <paragraph title="Paragraph A1-2-1"/>
    <paragraph title="Paragraph A1-2-2"/>
    <paragraph title="Paragraph A1-2-3"/>
  </chapter>
  <chapter title="Chapter A1-3">
    <paragraph title="Paragraph A1-3-1"/>
    <paragraph title="Paragraph A1-3-2"/>
    <paragraph title="Paragraph A1-3-3"/>
  </chapter>
</book>
<book title="B1">
  <chapter title="Chapter B1-1">
    <paragraph title="Paragraph B1-1-1"/>
    <paragraph title="Paragraph B1-1-2"/>
    <paragraph title="Paragraph B1-1-3"/>
  </chapter>
  <chapter title="Chapter B1-2">
    <paragraph title="Paragraph B1-2-1"/>
    <paragraph title="Paragraph B1-2-2"/>
    <paragraph title="Paragraph B1-2-3"/>
  </chapter>
  <chapter title="Chapter B1-3">
    <paragraph title="Paragraph B1-3-1"/>
    <paragraph title="Paragraph B1-3-2"/>
    <paragraph title="Paragraph B1-3-3"/>
  </chapter>
</book>
<book title="C1">
  <chapter title="Chapter C1-1">
    <paragraph title="Paragraph C1-1-1"/>
    <paragraph title="Paragraph C1-1-2"/>
    <paragraph title="Paragraph C1-1-3"/>
  </chapter>
  <chapter title="Chapter C1-2">
    <paragraph title="Paragraph C1-2-1"/>
    <paragraph title="Paragraph C1-2-2"/>
    <paragraph title="Paragraph C1-2-3"/>
  </chapter>
  <chapter title="Chapter C1-3">
    <paragraph title="Paragraph C1-3-1"/>
    <paragraph title="Paragraph C1-3-2"/>
    <paragraph title="Paragraph C1-3-3"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4bd05ace5a00af112d25bd18b9b5e0d0");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "8ce7f753f1cadb91574f15339d1deff8");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4793e53ce10a7d5a37c7437882d67b73");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "731a5218ec2a9636ffc8a5ec869d75d5");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis addresses the document and thus has a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: /
OPTIONS {{service}}?2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9cab20b783b4ace6330188afb8e9451a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis without usable target
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (XPath parse error)
# - URI: //
OPTIONS {{service}}?2f2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "42a2b552599500246076f9182af20d68");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6196dba52703776af2e6593f772ed7ce");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41b33ccdada8b2d9d98be8430a83eb0d");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "7d70c4690b9a3d996eef6b35833269ab");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//chapter
OPTIONS {{service}}?282f626f6f6b73292f2f63686170746572 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "2d17a1363849d190f48d6dbb9685c9b0");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//paragraph
OPTIONS {{service}}?282f626f6f6b73292f2f706172616772617068 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "a5f74f24b2fcfba93dbd7e3b6cbf3a08");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "c421c14bf959811658d0fbb4a5796423");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis without a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book/new/new HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "36e20f7b294978a27b291b3d0764348a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath function has no effects
# Expectations:
# - Status code 204 No Content
# - Storage: UnitTest_Storage_O0
# - Storage-Revision: 2/0
# - Allow: CONNECT, OPTIONS, GET, POST
OPTIONS {{service}}name(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "afde7af9b75e97f8e8d796e16f529bdf");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# Wrong XPath function has no effects
# Because XPath functions are not evaluated or validated via OPTIPONS.
# The request checks more whether it can be processed.
# Expectations:
# - Status code 400 Bad Request
# - Message: XPath function (Unknown function wrong)
OPTIONS {{service}}wrong(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "771d7e762794372c4d5289796f034aab");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6196dba52703776af2e6593f772ed7ce");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "43bfaf862c907e060503b3ac0ba23515");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis with a target attribute
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book%5B1%5D/@title HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "a5c0a3240242f986740c0cdf2b60a0ea");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# XPath axis without a target attribute
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/2774 bytes
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book%5B1%5D/@titlex HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "d16de67a7745ca655cb42c4963f401e4");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41e936d8059258d5d8218e68d6422136");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (XPath parse error)
OPTIONS {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "698452ff07ab850f331163b2a0b9767e");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5f94c13b9e4ebd872aac03fea123aa0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6196dba52703776af2e6593f772ed7ce");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41b33ccdada8b2d9d98be8430a83eb0d");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d7e2c9bc800e576eafe01d2f05baa698");
});
%}
