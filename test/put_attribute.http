# Test sequence for putting of attributes to storage elements.

# PUT creates elements and attributes in storage and/or changes the value of
# existing ones. The position for the insert is defined via an XPath. XPath uses
# different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Not Found
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "08cea1cc47a20ce28b1025bfd579921a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "aa5d077b074868af088cb5684c5ed015");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "098f6bcd4621d373cade4e832627b4f6");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1e6cd917ed71a1241e4bedc29264bd98");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Created
# - Storage-Revision: 1/1
# - Storage-Space: 262144/72 bytes
PUT {{service}} HTTP/1.0
Storage: {{storage_put_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "b064518214ba578ef590d162ae445172");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f83f723d1aef7c282a31ed0cd1014fbc");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "eece7445b364079bf7390ad5912594ed");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "d30d551ce95e265b5d69685b2d016c66");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/1
# - Storage-Space: 262144/100 bytes
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "08cea1cc47a20ce28b1025bfd579921a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "7560f01a3674d3ae52a751e2c69f8ba9");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "7708845ab23191f75648bb48f761f082");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "5030f035dea83033dc2153667922492a");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "89b8c47c594a9013c6dcb887d3ba6de9");
});
%}

###
# Using unicode should not cause problems
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 3/1
# - Storage-Space: 262144/141 bytes
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - Unicode characters are inserted as UTF-8
PUT {{service}}(/books)/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4cb6953910104e7a0f7a917fc3888184");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "9f5313a52dc5da5401c6bcf581236867");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "91c95f22c1d5a4ddfda3913e07905712");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "ed3c5e5cb3f22eb6fa8b25927525c3d0");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "3885d631d2988d6e3881b993f4abdfee");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 4/1
# - Storage-Space: 262144/91 bytes
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

concat(name(/*), "-Test")

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "08cea1cc47a20ce28b1025bfd579921a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "0b3c71e723568d96530ef4ee502e44b0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "71653560d3ec1998ee14b70dea65a4e3");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "747a4eef07099bf7e37b5946806f28d0");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "1e538670837ae98b58912023ac4edf28");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Content
# - Message: Invalid XPath function (XPath parse error)
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "08cea1cc47a20ce28b1025bfd579921a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "b77f096953a1b7205d5687ed4b77ac04");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1bc14c022d435505a531c29b225265c3");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "cfbf344b7a9ad579705c30c6a90f91e0");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "1e538670837ae98b58912023ac4edf28");
});
%}

###
# Using Unicode should not cause problems.
# Here the XML file of the storage is parsed again, which must also work with
# the previously inserted unicode.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 5/1
# - Storage-Space: 262144/100 bytes
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "08cea1cc47a20ce28b1025bfd579921a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "7560f01a3674d3ae52a751e2c69f8ba9");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "7708845ab23191f75648bb48f761f082");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "daaaf2498643bb86618ef4fb436bb01a");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "732daf32c4b6286804283254bbe3b75b");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PUT {{service}}/books/@attrG HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "b281f2d5b90f4520fef9236a27ee5594");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "8ed0d06fde4fba08a2e400eb3d26ea05");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "8add73aba839b154b44c7121cd173803");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "732daf32c4b6286804283254bbe3b75b");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 6/1
# - Storage-Space: 262144/124 bytes
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/@attrD HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "0a3adce105973dad2ca396be69fadf01");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "2d842067689a5d15379803bfb7d3af61");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "ef867d9a1c449bebd941e0c92c579736");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "204459063f0cebe5aa7067ffd42ba07b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "8ed0d06fde4fba08a2e400eb3d26ea05");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "8add73aba839b154b44c7121cd173803");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "ef867d9a1c449bebd941e0c92c579736");
});
%}

###
# Expectations:
# - Status code 304 Not Modified
#   attribute ___rev is ignored, but does not cause errors
# - Storage-Revision: 6/0
# - Storage-Space: 262144/124 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "64588f81720aa088678d745781e61cc0");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "a46db1ebcb80e5b45b5e1443242b6c2c");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "ef867d9a1c449bebd941e0c92c579736");
});
%}

###
# Expectations:
# - Status code 304 Not Modified
#   attribute ___uid is ignored, but does not cause errors
# - Storage-Revision: 6/0
# - Storage-Space: 262144/124 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "1b7c464a25a0ddbc4ec45f9bd43eaacb");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "a46db1ebcb80e5b45b5e1443242b6c2c");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "ef867d9a1c449bebd941e0c92c579736");
});
%}

###
# Expectations:
# - Status code 304 Not Modified
#   the addressing of the XML document is detected
# - Storage-Revision: 6/0
# - Storage-Space: 262144/124 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4e1076d7de50c0c273bff5b991020b36");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "a46db1ebcb80e5b45b5e1443242b6c2c");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "ef867d9a1c449bebd941e0c92c579736");
});
%}

###
# Expectations:
# - Status code 304 Not Modified
#   the addressing of the XML document is detected
# - Storage-Revision: 7/1
# - Storage-Space: 262144/138 bytes
# - Storage-Revision: 6/0
# - Storage-Space: 262144/124 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4e1076d7de50c0c273bff5b991020b36");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "7f3e4f944d3c8a1c842f196f1e101ea1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "3e97c642af0d59074a0df636167a815e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "a46db1ebcb80e5b45b5e1443242b6c2c");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "ef867d9a1c449bebd941e0c92c579736");
});
%}

###
# Expectations:
# - Status code 204 No Content
#   In the storage the attribute is added
# - Storage-Revision: 7/1
# - Storage-Space: 262144/133 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

name(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "204459063f0cebe5aa7067ffd42ba07b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "7f3e4f944d3c8a1c842f196f1e101ea1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "3e97c642af0d59074a0df636167a815e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "c03b3d5307c6a026c50c39bd897e35e6");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# XPath as value is not supported
# Expectations:
# - Status code 422 Unprocessable Content
# - Message: Invalid XPath (Axes are not supported)
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "204459063f0cebe5aa7067ffd42ba07b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "eb5cc7470d5a96e72d4533280a546e8a");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "96ce033aedb11790a7b97aa65b9013c9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "86d8fd87c9219e91407a387312139796");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# XPath with wrong function
# Expectations:
# - Status code 422 Unprocessable Content
# - Message: Invalid XPath function (Unregistered function)
PUT {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "204459063f0cebe5aa7067ffd42ba07b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "b77f096953a1b7205d5687ed4b77ac04");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1c9aa69a02e388d260e0dc1583a63a08");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "43bfaf862c907e060503b3ac0ba23515");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 304 Not Modified
#   the addressing of the XML document is detected
# - Storage-Revision: 7/0
# - Storage-Space: 262144/133 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
# - URI: //books/../@___xxx
PUT {{service}}?2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "6c19034f49122fc167969a1d77e05c46");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "9c75805261bca10d4c3919867d6c89b1");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 304 Not Modified
#   the addressing of a the XML document is detected
# - Storage-Revision: 7/0
# - Storage-Space: 262144/133 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
# - URI: /*/../@___xxx
PUT {{service}}?2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "0a8f8a0cdbd22dce1cadff0e851d1a22");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "9c75805261bca10d4c3919867d6c89b1");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# XPath without target
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 7/0
# - Storage-Space: 262144/133 bytes
PUT {{service}}/wrong/@new HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "ce76721b132d7f9b3b17b34dd872bf6f");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "9c75805261bca10d4c3919867d6c89b1");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# XPath without target
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 7/0
# - Storage-Space: 262144/133 bytes
PUT {{service}}/wrong/wrong/@new HTTP/1.0
Storage: {{storage_put_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "5f81da1aedffa1138cb72d735a3aa4eb");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "115abbca99ab224831ec2ab62c699d54");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "9c75805261bca10d4c3919867d6c89b1");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "e7de2cd6fc440271860aef838ae62150");
});
%}

###
# TODO: not supported test case
# The JetBrains HTTP client automatically adds the Content-Length header to the
# requestand the request should be tested without the Content-Length header.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is mssing but without effect
#PUT {{service}}/books/@attrB HTTP/1.0
#Storage: {{storage_put_attribute}}
#Content-Type: text/plain
#
#test_value<2>
#
#> {%
#client.test("unittest", function() {
#});
#%}

###
# TODO: not supported test case
# The JetBrains HTTP client automatically adds the Content-Length header to the
# requestand the request should be tested with a wrong Content-Length header.
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is wrong but ignored
#PUT {{service}}/books/@attrC HTTP/1.0
#Storage: {{storage_put_attribute}}
#Content-Type: text/plain
#Content-Length: 5
#
#123456789ABCDEF
#
#> {%
#client.test("unittest", function() {
#});
#%}
