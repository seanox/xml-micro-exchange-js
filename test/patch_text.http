# Test sequence for patching text in elements of the storage.

# PATCH changes existing elements and attributes in storage. The position for
# the insert is defined via an XPath. The method works almost like PUT, but the
# XPath axis of the request always expects an existing target. XPath uses
# different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f67742ce39846c4aa110106a12b7cf24");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "97c698b4ef93088caf0a721a792d3ab6");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1e6cd917ed71a1241e4bedc29264bd98");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
# - Storage-Revision: 1/1
# - Storage-Space: 262144/72 bytes
PUT {{service}} HTTP/1.0
Storage: {{storage_patch_text}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "b064518214ba578ef590d162ae445172");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4065c43007c1318e97e8785a6c213002");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "eece7445b364079bf7390ad5912594ed");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "03588eff75159c0fd4fdcb3358abf8dc");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/1
# - Storage-Space: 262144/98 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Hello Internet!

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f67742ce39846c4aa110106a12b7cf24");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "97c698b4ef93088caf0a721a792d3ab6");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "943dbd4d68de81e796bc37492a0c5e1c");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "b8d8ddbac5f9bce3670b4f2b3e02d081");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 3/8
# - Storage-Space: 262144/452 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: application/xml

<book title="A2">
  <comment></comment>
</book>
<book title="B2">
  <comment></comment>
</book>
<book title="C2">
  <comment></comment>
</book>
<book title="D2">
  <comment></comment>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "0d1f5361ea3eb92b15d66aab19c83bd6");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1fbe6816b3b8277ca81f04062db66eda");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "ce265bbb135824433ec6b5a61bf7d304");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "2f9db886dbe5ab4b489f6dccbed713b2");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 4/1
# - Storage-Space: 262144/424 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text A

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "76c96ad8d50f1ba076fbeff86c590a26");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5d1f0a12cc61a8497d2bfb6e2e20164");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "b840f6f2ae276139d6d487b84011e3b7");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e3666d2c4ef5f8653ce8874dcd1f73ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "103fc02b9295216c5bbb30397ab520fb");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 5/3
# - Storage-Space: 262144/505 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with text and without further elements
PATCH {{service}}(/books/book)/comment HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Text B

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "6fc55ec3b4530e285a493dc81421db15");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c5d1f0a12cc61a8497d2bfb6e2e20164");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "eb5deeca9c16cac732e5d0abc6781e2a");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "79acc6dc743b79312cc12462f8634046");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "4dd274e12614f2449cb7cafa3a2b4360");
});
%}

###
# Using unicode should not cause problems.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 6/1
# - Storage-Space: 262144/133 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with encoded text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "50b1d167692b2effc76880bd84513783");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "91c95f22c1d5a4ddfda3913e07905712");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "662b0374918ba8225b5049a1c05e9aa2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "b571975bf3895818476b485c7e15c54b");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 7/1
# - Storage-Space: 262144/88 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - books element with books as text and without further elements
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/*)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f626d9200ba80502658b1ceb04d1b251");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "7a2f41be6365402a7c06b1f1126424fd");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "27445b183e15aba9eb77981b5a10057f");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (XPath parse error)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f626d9200ba80502658b1ceb04d1b251");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1bc14c022d435505a531c29b225265c3");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "cfbf344b7a9ad579705c30c6a90f91e0");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath function (Unknown function wrong)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f626d9200ba80502658b1ceb04d1b251");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1c9aa69a02e388d260e0dc1583a63a08");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "43bfaf862c907e060503b3ac0ba23515");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "ce93cb50a34f8532dd7ab3027d050afc");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "96ce033aedb11790a7b97aa65b9013c9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "86d8fd87c9219e91407a387312139796");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/xpath

.

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4743516791b8c984379bf709b7fd6499");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "5058f1af8388633f609cadb75a75dc9d");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "86d8fd87c9219e91407a387312139796");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 7/0
# - Storage-Space: 262144/88 bytes
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}?2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "c8d514b7df64c37bb78a71ba0cf1638b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "9ca8c69e8d7945706e460b11bac41b31");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "0cbc6611f5540bd0809a388dc95a615b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f7a780ec9eccd43e346123515d8ab617");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 7/0
# - Storage-Space: 262144/88 bytes
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}?2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "1cd2f7493a0e1564c728488eddfa1a8e");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "9ca8c69e8d7945706e460b11bac41b31");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "0cbc6611f5540bd0809a388dc95a615b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f7a780ec9eccd43e346123515d8ab617");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 7/0
# - Storage-Space: 262144/88 bytes
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "bb8627e0cf2b99914ca0a07eb7dc1252");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "9ca8c69e8d7945706e460b11bac41b31");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "0cbc6611f5540bd0809a388dc95a615b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f7a780ec9eccd43e346123515d8ab617");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# XPath without a target
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 7/0
# - Storage-Space: 262144/88 bytes
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

Test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "ba28105367b8fe57933251b0f7915782");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "9ca8c69e8d7945706e460b11bac41b31");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "0cbc6611f5540bd0809a388dc95a615b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f7a780ec9eccd43e346123515d8ab617");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "dc014bca2c15e2766100a53bc0eece4f");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 8/10
# - Storage-Space: 262144/669 bytes
# - Storage-Revision is increased
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: application/xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "9c8eda4cf8f05f434daf1a7f1f76a979");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "6aa046035439339400624649a881b63f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "48e3f908ddbc4bc3911825b1ec39e934");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f02eb29103c81d3fd79f0c88ed54d65b");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "5292a4808cd98b6d96fd8d5adc31f97c");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 9/1
# - Storage-Space: 262144/552 bytes
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only "test", comments and text were deleted
PATCH {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_patch_text}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "30ccbe5e2817833508589017824cd9dc");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "9ca8c69e8d7945706e460b11bac41b31");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "098f6bcd4621d373cade4e832627b4f6");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "3a4b5f59f3184145f56a1aafd8d7b10b");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "005e103e2dfff163cf588267c524321d");
});
%}
