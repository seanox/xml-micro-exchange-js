# Test sequence for POST requests.

# POST queries data about XPath axes and functions via transformation. For this,
# an XSLT stylesheet is sent with the request-body, which is then applied by the
# XSLT processor to the data in storage. Thus the content type
# application/xslt+xml is always required. The client defines the content type
# for the output with the output-tag and the method-attribute. The XPath is
# optional for this method and is used to limit and preselect the data. The
# processing is strict and does not accept unnecessary spaces.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a9fce63d3f69c67b9a0aed7bc70bff44");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c38f44002f52604b327a3d281cde8128");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1a3b8937cde8aa40ce5ffe8d389146ec");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
# - Storage-Revision: 1/1
# - Storage-Space: 262144/76 bytes
PUT {{service}} HTTP/1.0
Storage: {{storage_post}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "b064518214ba578ef590d162ae445172");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "cddbc145bb3b58990bfa329d1a5abe40");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "eece7445b364079bf7390ad5912594ed");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "088457fe0667ea1e394bc4d61d6d7d2a");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "34a4a9d925fed6ff5359a00c4ecc02d5");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/123
# - Storage-Space: 262144/13324 bytes
PUT {{service}}/statistic HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xml

<cities>
  <city name="Berlin">
    <districts>
      <district name="Charlottenburg-Wilmersdorf">
        <quarters>
          <quarter name="Charlottenburg" area="10.6" inhabitants="130663" population="12327"/>
          <quarter name="Charlottenburg-Nord" area="6.2" inhabitants="19597" population="3161"/>
          <quarter name="Grunewald" area="22.3" inhabitants="10999" population="493.2"/>
          <quarter name="Halensee" area="1.27" inhabitants="15627" population="12305"/>
          <quarter name="Schmargendorf" area="3.59" inhabitants="22205" population="6185"/>
          <quarter name="Westend" area="13.5" inhabitants="41882" population="3102"/>
          <quarter name="Wilmersdorf" area="7.16" inhabitants="102619" population="14332"/>
        </quarters>
      </district>
      <district name="Friedrichshain-Kreuzberg">
        <quarters>
          <quarter name="Friedrichshain" area="9.78" inhabitants="136035" population="13910"/>
          <quarter name="Kreuzberg" area="10.4" inhabitants="154351" population="14841"/>
        </quarters>
      </district>
      <district name="Lichtenberg">
        <quarters>
          <quarter name="Alt-Hohenschönhausen" area="9.33" inhabitants="48979" population="5250"/>
          <quarter name="Falkenberg" area="3.06" inhabitants="1870" population="611.1"/>
          <quarter name="Fennpfuhl" area="2.12" inhabitants="34074" population="16073"/>
          <quarter name="Friedrichsfelde" area="5.55" inhabitants="53813" population="9696"/>
          <quarter name="Karlshorst" area="6.6" inhabitants="27956" population="4236"/>
          <quarter name="Lichtenberg" area="7.22" inhabitants="41758" population="5784"/>
          <quarter name="Malchow" area="1.54" inhabitants="635" population="412.3"/>
          <quarter name="Neu-Hohenschönhausen" area="5.16" inhabitants="56918" population="11031"/>
          <quarter name="Rummelsburg" area="4.52" inhabitants="25650" population="5675"/>
          <quarter name="Wartenberg" area="6.92" inhabitants="2548" population="368.2"/>
        </quarters>
      </district>
      <district name="Marzahn-Hellersdorf">
        <quarters>
          <quarter name="Biesdorf" area="12.4" inhabitants="28069" population="2264"/>
          <quarter name="Hellersdorf" area="8.1" inhabitants="82109" population="10137"/>
          <quarter name="Kaulsdorf" area="8.81" inhabitants="19408" population="2203"/>
          <quarter name="Mahlsdorf" area="12.9" inhabitants="29360" population="2276"/>
          <quarter name="Marzahn" area="19.5" inhabitants="111021" population="5693"/>
        </quarters>
      </district>
      <district name="Mitte">
        <quarters>
          <quarter name="Gesundbrunnen" area="6.13" inhabitants="95175" population="15526"/>
          <quarter name="Hansaviertel" area="0.53" inhabitants="5926" population="11181"/>
          <quarter name="Mitte" area="10.7" inhabitants="102465" population="9576"/>
          <quarter name="Moabit" area="7.72" inhabitants="80495" population="10427"/>
          <quarter name="Tiergarten" area="5.17" inhabitants="14881" population="2878"/>
          <quarter name="Wedding" area="9.23" inhabitants="86806" population="9405"/>
        </quarters>
      </district>
      <district name="Neukölln">
        <quarters>
          <quarter name="Britz" area="12.4" inhabitants="42796" population="3451"/>
          <quarter name="Buckow" area="6.35" inhabitants="40703" population="6410"/>
          <quarter name="Gropiusstadt" area="2.66" inhabitants="37630" population="14147"/>
          <quarter name="Neukölln" area="11.7" inhabitants="166157" population="14201"/>
          <quarter name="Rudow" area="11.8" inhabitants="42631" population="3613"/>
        </quarters>
      </district>
      <district name="Pankow">
        <quarters>
          <quarter name="Blankenburg" area="6.03" inhabitants="6875" population="1140"/>
          <quarter name="Blankenfelde" area="13.4" inhabitants="2064" population="154"/>
          <quarter name="Buch" area="18.2" inhabitants="16868" population="926.8"/>
          <quarter name="Französisch Buchholz" area="12" inhabitants="21281" population="1773"/>
          <quarter name="Heinersdorf" area="3.95" inhabitants="7869" population="1992"/>
          <quarter name="Karow" area="6.65" inhabitants="19679" population="2959"/>
          <quarter name="Niederschönhausen" area="6.49" inhabitants="31996" population="4930"/>
          <quarter name="Pankow" area="5.66" inhabitants="64945" population="11474"/>
          <quarter name="Prenzlauer Berg" area="11" inhabitants="165003" population="15000"/>
          <quarter name="Rosenthal" area="4.9" inhabitants="9596" population="1958"/>
          <quarter name="Stadtrandsiedlung Malchow" area="5.68" inhabitants="1120" population="197.2"/>
          <quarter name="Weißensee" area="7.93" inhabitants="54032" population="6814"/>
          <quarter name="Wilhelmsruh" area="1.37" inhabitants="8007" population="5845"/>
        </quarters>
      </district>
      <district name="Reinickendorf">
        <quarters>
          <quarter name="Borsigwalde" area="2" inhabitants="6777" population="3389"/>
          <quarter name="Frohnau" area="7.8" inhabitants="16814" population="2156"/>
          <quarter name="Heiligensee" area="10.7" inhabitants="18100" population="1692"/>
          <quarter name="Hermsdorf" area="6.1" inhabitants="16607" population="2722"/>
          <quarter name="Konradshöhe" area="2.2" inhabitants="6004" population="2729"/>
          <quarter name="Lübars" area="5" inhabitants="5203" population="1041"/>
          <quarter name="Märkisches Viertel" area="3.2" inhabitants="40379" population="12618"/>
          <quarter name="Reinickendorf" area="10.5" inhabitants="83909" population="7991"/>
          <quarter name="Tegel" area="33.7" inhabitants="36986" population="1098"/>
          <quarter name="Waidmannslust" area="2.3" inhabitants="10973" population="4771"/>
          <quarter name="Wittenau" area="5.9" inhabitants="24656" population="4179"/>
        </quarters>
      </district>
      <district name="Spandau">
        <quarters>
          <quarter name="Falkenhagener Feld" area="6.88" inhabitants="38759" population="5634"/>
          <quarter name="Gatow" area="10.1" inhabitants="3733" population="369.6"/>
          <quarter name="Hakenfelde" area="20.4" inhabitants="31296" population="1534"/>
          <quarter name="Haselhorst" area="4.73" inhabitants="15663" population="3311"/>
          <quarter name="Kladow" area="14.8" inhabitants="16212" population="1095"/>
          <quarter name="Siemensstadt" area="5.66" inhabitants="12831" population="2267"/>
          <quarter name="Spandau" area="8.03" inhabitants="39560" population="4927"/>
          <quarter name="Staaken" area="10.9" inhabitants="46607" population="4276"/>
          <quarter name="Wilhelmstadt" area="10.4" inhabitants="40536" population="3898"/>
        </quarters>
      </district>
      <district name="Steglitz-Zehlendorf">
        <quarters>
          <quarter name="Dahlem" area="8.39" inhabitants="16929" population="2018"/>
          <quarter name="Lankwitz" area="6.99" inhabitants="43566" population="6233"/>
          <quarter name="Lichterfelde" area="18.2" inhabitants="86206" population="4737"/>
          <quarter name="Nikolassee" area="19.6" inhabitants="16695" population="851.8"/>
          <quarter name="Steglitz" area="6.79" inhabitants="75803" population="11164"/>
          <quarter name="Wannsee" area="23.7" inhabitants="10334" population="436"/>
          <quarter name="Zehlendorf" area="18.8" inhabitants="60538" population="3220"/>
        </quarters>
      </district>
      <district name="Tempelhof-Schöneberg">
        <quarters>
          <quarter name="Friedenau" area="1.65" inhabitants="28263" population="17129"/>
          <quarter name="Lichtenrade" area="10.1" inhabitants="51955" population="5144"/>
          <quarter name="Mariendorf" area="9.38" inhabitants="53094" population="5660"/>
          <quarter name="Marienfelde" area="9.15" inhabitants="32349" population="3535"/>
          <quarter name="Schöneberg" area="10.6" inhabitants="123075" population="11611"/>
          <quarter name="Tempelhof" area="12.2" inhabitants="62248" population="5102"/>
        </quarters>
      </district>
      <district name="Treptow-Köpenick">
        <quarters>
          <quarter name="Adlershof" area="6.11" inhabitants="19934" population="3263"/>
          <quarter name="Altglienicke" area="7.89" inhabitants="29357" population="3721"/>
          <quarter name="Alt-Treptow" area="2.31" inhabitants="12878" population="5575"/>
          <quarter name="Baumschulenweg" area="4.82" inhabitants="18842" population="3909"/>
          <quarter name="Bohnsdorf" area="6.52" inhabitants="11671" population="1790"/>
          <quarter name="Friedrichshagen" area="14" inhabitants="19145" population="1368"/>
          <quarter name="Grünau" area="9.13" inhabitants="6784" population="743"/>
          <quarter name="Johannisthal" area="6.54" inhabitants="19853" population="3036"/>
          <quarter name="Köpenick" area="34.9" inhabitants="66765" population="1913"/>
          <quarter name="Müggelheim" area="22.2" inhabitants="6798" population="306.2"/>
          <quarter name="Niederschöneweide" area="3.49" inhabitants="12850" population="3682"/>
          <quarter name="Oberschöneweide" area="6.18" inhabitants="23500" population="3803"/>
          <quarter name="Plänterwald" area="3.01" inhabitants="11365" population="3776"/>
          <quarter name="Rahnsdorf" area="21.5" inhabitants="9523" population="442.9"/>
          <quarter name="Schmöckwitz" area="17.1" inhabitants="4424" population="258.7"/>
        </quarters>
      </district>
    </districts>
  </city>
</cities>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "251c1c0fa751edeb1172882a65aefc07");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "64673e8d88fd5214ea7e5751680148f6");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "b7f0172e7739fee6e4836733fba383c2");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "967cf627ae468e5a346cf2a1113d618b");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 642
# - Content-Type: application/xml
# - Content: UTF-8 + HTML entity encoded
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "7a79e185e2d34c585019badb080e4435");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "0334ed63e454a335b6e8cc9332740869");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "33890da9197e966ab4e898facc83607f");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "677068f3047be9d3948275b2352f9643");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# Storage-Revision: 2/0
# Storage-Space: 262144/13324 bytes
# - Content-Length: 397
# - Content-Type: application/xml
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}?2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="district" select="/district/@name"/>  
    <district name="{$district}">
	  <quarters>
	  <xsl:for-each select="/district/quarters/quarter">
	  <xsl:variable name="quarter" select="@name"/>
	    <quarter name="{$quarter}"/>
	  </xsl:for-each>
      </quarters>
	</district>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "d61909221ab45262defd02fadf03455b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4a6d08fec1e14d2065f4e3bd929d883c");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c5be2a40fa10a2432959b0a44cfc33c6");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "6af62578c7f34a0c0aab0fac73c2cfe9");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "19e8ca3901e82207e02125d856f75361");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 302
# - Content-Type: text/plain; charset=iso-8859-1
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}?2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text" encoding="iso-8859-1"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>  
----
<xsl:for-each select="//quarter">
<xsl:value-of select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:text> </xsl:text>
<xsl:value-of select="@name"/><xsl:text>&#13;&#10;</xsl:text>
</xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "d61909221ab45262defd02fadf03455b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "bb4cb3b30f1466b454aa40f272d4b928");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "af79f140a759c3f8314f5cf404728368");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f53e22aea625e8c37cfb953f3d88ca5c");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "caba5cb9a43eb4698be34e8fc57304d0");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong Content-Type
# Expectations:
# - Status code 415 Unsupported Media Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml-x

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "877dabbae47ec6e0d3fe7c8f72d1e47d");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "0334ed63e454a335b6e8cc9332740869");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "8add73aba839b154b44c7121cd173803");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong XSLT markup, xsl:templatex is used instead of xsl:template
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element templatex / xsltStylePreCompute: unknown xsl:templatex)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:templatex>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "556c0c3faabeaa0cbd9c63d997649fea");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "58e8e4e2b0346c1120063f0c02250d81");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f97e6bd2c93602c7e7d9b7f1fd124707");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong XSLT markup, xsl:templatex is used and is closed by xsl:template
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element templatex / xsltStylePreCompute: unknown xsl:templatex)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "1362d2e9255ba0b91691076d002e9f3f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "535154d39d7ad9f026b1f97fba9c20db");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f97e6bd2c93602c7e7d9b7f1fd124707");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong XSLT markup, city tag is not closed
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element templatex / xsltStylePreCompute: unknown xsl:templatex)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a58cc690f4e20406cab8254385088793");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "bde9f885b3a84f0e4fd86b6123b35dfa");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f97e6bd2c93602c7e7d9b7f1fd124707");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong XSLT markup, city tag is not closed
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element templatex / xsltStylePreCompute: unknown xsl:templatex)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4d5d41ad479e0ddac21a915e4e69691e");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "8436cf8a82f89122333cbde00ad73bb9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f97e6bd2c93602c7e7d9b7f1fd124707");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong XSLT EL function sumx (does not exists)
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (xmlXPathCompOpEval: function sumx not found / XPath error: Unregistered function)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sumx(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sumx(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "556c0c3faabeaa0cbd9c63d997649fea");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "ad78d0bec8ba2c6a21c9748d0edb97c2");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "fef15c90d3f254b4fc286af22024f0f4");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Wrong XSLT EL in variable: city attribute: select ] is missing
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (XPath error: Invalid predicate / compilation error: element variable)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin'/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a58cc690f4e20406cab8254385088793");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "e40190bec91f8fd68f84928e9552a8f8");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f7a3dc28ce59949c714e1fcc0df1ec9e");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT but without output
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Type: application/xml
# - Content-Length: 39
# - Content: <?xml version="1.0" encoding="UTF-8"?> (empty XML files, because output method xml)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a9fce63d3f69c67b9a0aed7bc70bff44");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c38f44002f52604b327a3d281cde8128");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "6b4ab43b3f3f2375360961e979984371");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "93286b7fccf6f6092628ada8b85c0727");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT but without output
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Type: application/xml
# - Content-Length: 39
# - Content: <?xml version="1.0" encoding="UTF-8"?> (empty XML files, because output method xml)
POST {{service}}/statistic/cities/city HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "f15df96c0b69c00f8e654deaec7a06a1");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a9fce63d3f69c67b9a0aed7bc70bff44");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c38f44002f52604b327a3d281cde8128");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "6b4ab43b3f3f2375360961e979984371");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "93286b7fccf6f6092628ada8b85c0727");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# XPath without target
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
POST {{service}}/statistic/cities/unknow HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "8614c1967108b3e432ecc75203aa7236");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a9fce63d3f69c67b9a0aed7bc70bff44");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c38f44002f52604b327a3d281cde8128");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "55daebd42ba712f170478667a8281f05");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# XPath functions are not supported
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
POST {{service}}name(/statistic) HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "192965b656cc0a3bc2be7af242251ca9");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a9fce63d3f69c67b9a0aed7bc70bff44");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c38f44002f52604b327a3d281cde8128");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6196dba52703776af2e6593f772ed7ce");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "b0dc0b357fdc347f6f9e804978870bf6");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (XPath parse error)
POST {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "752f1c44087b297cbc30fcc97170e31f");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a9fce63d3f69c67b9a0aed7bc70bff44");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c38f44002f52604b327a3d281cde8128");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6196dba52703776af2e6593f772ed7ce");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "41b33ccdada8b2d9d98be8430a83eb0d");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# POST without Content-Type should be responded with status 415
# Expectations:
# - Status code 415 Unsupported Media Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "cddbc145bb3b58990bfa329d1a5abe40");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "8add73aba839b154b44c7121cd173803");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# POST without response body should be responded with status 422
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Unprocessable Entity
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4e0e7d8d6f770c7ac1f3149034aab067");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "a0c3a055db7b856a7bf76899678107b9");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# XPath with serveral elements as target should work
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 44
# - Content-Type: application/xml
# - Content: <?xml version="1.0"?> Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4b27d0315a0e0cc806cc2a57edd9fc01");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4ff04d32632df660f3e1bbbca945b4de");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "97d75422fe6f2559c169cd509a60ff6d");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "0ec23ab3781b2b5b1c55fadd9b740dc0");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# XPath with serveral attributes as target should work
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 61
# - Content-Type: application/xml
# - Content: <?xml version="1.0"?> Names: 12x Areas: 96x
# - URI: //district/@name|//quarter/@area
POST {{service}}?2f2f64697374726963742f406e616d657c2f2f717561727465722f4061726561 HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Names: <xsl:value-of select="count(//name)"/>x
    Areas: <xsl:value-of select="count(//area)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "e88d4e8f40bc0aa0151ecd491450570d");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "0ba251dab4a93e47bd9144c41df86c74");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "e0e68b0a34e9f7536ea75d57271a3c92");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "322498195947fe1939e94e2180667ad2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "4bdf0d750deb7ef96610da23acbb2a0e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT without XPath and with output
# Text/JSON output, the JSON directive in the request has an effect.
# Expectations:
# - Status code 200 Success
# - Content-Length: 506
# - Content-Type: application/json
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}?2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="district" select="/district/@name"/>
    <district name="{$district}">
	  <quarters>
	  <xsl:for-each select="/district/quarters/quarter">
	    <xsl:variable name="quarter" select="@name"/>
	    <quarter name="{$quarter}"/>
	  </xsl:for-each>
      </quarters>
	</district>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "d61909221ab45262defd02fadf03455b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4a6d08fec1e14d2065f4e3bd929d883c");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "c02b6d0f725d01c654fa3ef9e54b5b62");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "96480d8f53b36560809f17f3189a4cfe");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "bbb2ff152a21320358cd22fd6537c05b");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT without XPath and with output
# Text/JSON output, the JSON directive in the request has an effect.
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 316
# - Content-Type: application/json
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}?2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>
----
<xsl:for-each select="//quarter">
<xsl:value-of select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:text> </xsl:text>
<xsl:value-of select="@name"/><xsl:text>&#13;&#10;</xsl:text>
</xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "d61909221ab45262defd02fadf03455b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "fe443519adfb9c872002b03c91c8c3f0");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4823e7df7fe6380db209c644dce24726");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "22a79734e1fb2feb8c4047eb4af0b67a");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "e79465a19d7c2ebba9ef2de3d650fec3");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Valid XSLT without XPath and with output
# Text output, mix of plain an tags with attributes
# Tags and attributes are not included in the output
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 361
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}?2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text" encoding="iso-8859-1"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>
----
<xsl:for-each select="/district/quarters/quarter">
<xsl:variable name="area" select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:variable name="name" select="@name"/>
<quarter area="1-{$area}-1" name="2-{$name}-2">
3-<xsl:value-of select="$area"/>-3 4-<xsl:value-of select="$name"/>-4
</quarter>
</xsl:for-each>
----
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "d61909221ab45262defd02fadf03455b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f0d32619c6b11c54592edcad975f9e1b");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "8e9f9e0b663a251081ca0e6684468664");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "f10b0ce1c61c6307f43c56954b8f1886");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "76a69ee9b02277d565ab92fa4a034379");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Output of a node
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Type: application/xml
# - Content-Length: 39
# - Content: <?xml version="1.0" encoding="UTF-8"?> (empty XML files, because output method xml)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:value-of select="//district[@name='Mitte']"/>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4b27d0315a0e0cc806cc2a57edd9fc01");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "aaaeea722a0257a3143308e16090d2e9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "6b4ab43b3f3f2375360961e979984371");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "93286b7fccf6f6092628ada8b85c0727");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Output of a node
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Result of the template: empty
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    <xsl:value-of select="//district[@name='Mitte']"/>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4573d2fb7e54799c6827599bb9a0434b");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f4388007e938f8dda622af60b0d6075b");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "92f42dc66b0938a8348dbdacc88be084");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "55daebd42ba712f170478667a8281f05");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template without output method used the default xml
# The result is not a valid XML-file
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Type: application/xml
# - Content-Length: 40
# - Content: <?xml version="1.0"?> Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "72b1f71ef22476ca51cf615c9ef9d296");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "2780e33a3f97328e03bd91e97c3df1df");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "97d75422fe6f2559c169cd509a60ff6d");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "0ec23ab3781b2b5b1c55fadd9b740dc0");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with xml output method
# The result is not a valid XML-file
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Type: application/xml
# - Content-Length: 44
# - Content: <?xml version="1.0"?> Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4b27d0315a0e0cc806cc2a57edd9fc01");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4ff04d32632df660f3e1bbbca945b4de");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "97d75422fe6f2559c169cd509a60ff6d");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "0ec23ab3781b2b5b1c55fadd9b740dc0");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with text output method
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 6
# - Content-type: text/plain
# - Content: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "fed7548b65f471fc13027e0b90a82ed6");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4efbee31a42ceca306e264b49ce7163a");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "591185ec10c3dcab2985402a972e335b");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "372e77c7499ba3c93fb36f136b8be9dc");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with html output method
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 20
# - Content-type: text/html
# - Content: <img src="">2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html"/>
  <xsl:template match="/">
    <img src=""/>
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "2e55777ae86d8614e600d69f4863fafb");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "47daec4f92aa598147db4fae170fbe83");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "8fc30d68de3741533c2eab32336bc016");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "6ba8093f79981a185164cd069143ac3a");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with invalid output method
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element output / invalid value for method: xhtml)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xhtml"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a23984b5d7e74064b7915c4d8107475f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "75f663b8ed83119f89d2fe590af6e05a");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "b6231f684a409e7ecd639a4ca6d0f036");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with invalid output method
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element output / invalid value for method: unknown)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="unknown"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "8a82d224f2bbee9071f89e95505c4c5c");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "ccfc092fbecc3553200528f7f8c98893");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "765219941739c587d713c3fb1a622601");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template without output method used the default xml
# Text/JSON output, the JSON directive in the request has an effect.
# The result is not a valid XML-file
# The intermediate transformation to XML, as a precursor to the transformation
# to JSON, will create an empty document, and JSON will also create null
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 5
# - Content-Type: application/json
# - Content: null
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "72b1f71ef22476ca51cf615c9ef9d296");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "2780e33a3f97328e03bd91e97c3df1df");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "c2321632c2eda0106d0b183745a35c0e");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "37a6259cc0c1dae299a7866489dff0bd");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with xml output method
# Text/JSON output, the JSON directive in the request has an effect.
# The result is not a valid XML-file
# The intermediate transformation to XML, as a precursor to the transformation
# to JSON, will create an empty document, and JSON will also create null
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 4
# - Content-Type: application/json
# - Content: null
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "4b27d0315a0e0cc806cc2a57edd9fc01");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4ff04d32632df660f3e1bbbca945b4de");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "c2321632c2eda0106d0b183745a35c0e");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "37a6259cc0c1dae299a7866489dff0bd");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with text output method
# Text/JSON output, the JSON directive in the request has an effect.
# The output of the transformation is a text enclosed in a JSON structure
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 10
# - Content-Type: application/json
# - Content: "2x\r\n  "
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "fed7548b65f471fc13027e0b90a82ed6");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "4efbee31a42ceca306e264b49ce7163a");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "eb1732d1399b7eab742308e2573e9903");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "8735da8bdab73b9c57bf63aad6e38bc7");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with html output method
# Text/HTML output, the JSON directive in the request has no effect.
# The explicit output of HTML cannot be transformed into JSON.
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 24
# - Content-type: application/json
# - Content: "<img src=\"\">2x\r\n  \r\n"
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html"/>
  <xsl:template match="/">
    <img src=""/>
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "2e55777ae86d8614e600d69f4863fafb");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "47daec4f92aa598147db4fae170fbe83");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "8e62b9f7f2c283f0d93223b4b69e42de");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "4f13c45a30faa392ba7098abfd491213");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with invalid output method
# the JSON directive in the request has no effect.
# Expectations:
# - Status code 422 Bad Request
# - Message: xsltproc failed (compilation error: element output / invalid value for method: xhtml)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xhtml"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "a23984b5d7e74064b7915c4d8107475f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "75f663b8ed83119f89d2fe590af6e05a");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "b6231f684a409e7ecd639a4ca6d0f036");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Template with invalid output method
# the JSON directive in the request has no effect.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: xsltproc failed (compilation error: element output / invalid value for method: unknown)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}?2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml
Accept: application/json

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="unknown"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "eca8bfbf748f18e0a882ab8147d03638");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "8a82d224f2bbee9071f89e95505c4c5c");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "ccfc092fbecc3553200528f7f8c98893");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "917ef711b7514d05e99aed61242ab05c");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "765219941739c587d713c3fb1a622601");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}

###
# Test of correct Content-Lengt for unicode
# Expectations:
# - Status code 200 Success
# - Storage-Revision: 2/0
# - Storage-Space: 262144/13324 bytes
# - Content-Length: 66
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //quarter[@area=9.33]
POST {{service}}?2f2f717561727465725b40617265613d392e33335d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output
    method="text" encoding="iso-8859-1"/><xsl:template
    match="/"><xsl:value-of
    select="*/@name"/><xsl:value-of
    select="*/@name"/><xsl:value-of
    select="*/@name"/></xsl:template></xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "787e26419c9ead635f620ae611a219b4");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "6403049c82607143afc2c082aa498506");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "533907f456f89b3ec6f8717b5647dc21");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "6ea793edc825cd6b0da28cb2d1217a47");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e823935c9236220cc3395f298d07125e");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d519473866bcf44e5b5e4beac2d96820");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "18dfe4bbecd955284cbd629fe6b7d9d6");
});
%}
