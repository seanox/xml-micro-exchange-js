# Test sequence for putting of attributes to storage elements.

# PATCH changes existing elements and attributes in storage. The position for
# the insert is defined via an XPath. The method works almost like PUT, but the
# XPath axis of the request always expects an existing target. XPath uses
# different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Not Found
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "adab6f8c459109067352f9303dd74858");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "1cddf083c4efaecb0b6fda39895c955e");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "098f6bcd4621d373cade4e832627b4f6");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1e6cd917ed71a1241e4bedc29264bd98");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Created
# - Storage-Revision: 1/1
#- Storage-Space: 262144/72 bytes
PUT {{service}} HTTP/1.0
Storage: {{storage_patch_attribute}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "b064518214ba578ef590d162ae445172");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "def45bd3412ae4318e0584ec3fe05b43");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "eece7445b364079bf7390ad5912594ed");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "9b848a02e2215be15f5327c191eadab3");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Attribute does not exist
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 1/0
# - Storage-Space: 262144/72 bytes
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "adab6f8c459109067352f9303dd74858");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c2f60efc8bc9449802775b699b2596a1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "7708845ab23191f75648bb48f761f082");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "7ef61ccbfcbebc95f981f22a6aa56534");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/1
# - Storage-Space: 262144/100 bytes
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PUT {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "08cea1cc47a20ce28b1025bfd579921a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c2f60efc8bc9449802775b699b2596a1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "7708845ab23191f75648bb48f761f082");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "20635ca88598d484d8a854d37f71e811");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "89b8c47c594a9013c6dcb887d3ba6de9");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 3/1
# - Storage-Space: 262144/100 bytes
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "adab6f8c459109067352f9303dd74858");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c2f60efc8bc9449802775b699b2596a1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "5a027a72abf28e88dc29549b6ed8958b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "31ac84f2667cb2c491f2169bcf88c0af");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "0d7163af3725faa7cf9abce4528221a6");
});
%}

###
# Using unicode should not cause problems
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 4/1
# - Storage-Space: 262144/141 bytes
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - Unicode characters are inserted as UTF-8
PATCH {{service}}(/books)/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

№ <123> äüö &&amp; "§-ß" '€'

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "a3161e6e67d7bb5264259d8e8e16e751");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "5a4d9644fcbb15e41cf553a87291e212");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "91c95f22c1d5a4ddfda3913e07905712");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e9f0a1abc8bc9ff7785538e085078bf7");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "230b5889b14c6856c411a0cc40eea7aa");
});
%}

###
# Using XPath function should work.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 5/1
# - Storage-Space: 262144/91 bytes
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

concat(name(/*), "-Test")

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "adab6f8c459109067352f9303dd74858");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "8fb8cefdd17d9777d74d1f461c93031d");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "71653560d3ec1998ee14b70dea65a4e3");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "c25202c0091184cc37ffe2beb1835d38");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "32dbe7add06aab85ed026d081b72b4fd");
});
%}

###
# Using invalid XPath function should not cause problems.
# Expectations:
# - Status code 422 Unprocessable Content
# - Message: Invalid XPath function (XPath parse error)
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

name(/+)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "adab6f8c459109067352f9303dd74858");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "765135bf530dfe743f99550dddee3f21");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1bc14c022d435505a531c29b225265c3");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "cfbf344b7a9ad579705c30c6a90f91e0");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "32dbe7add06aab85ed026d081b72b4fd");
});
%}

###
# Using Unicode should not cause problems.
# Here the XML file of the storage is parsed again, which must also work with
# the previously inserted unicode.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 6/1
# - Storage-Space: 262144/100 bytes
# - In the storage the attribute is patched
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
PATCH {{service}}/books/attribute::attrA HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<1>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "adab6f8c459109067352f9303dd74858");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c2f60efc8bc9449802775b699b2596a1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "7708845ab23191f75648bb48f761f082");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "5b02eb7b35336b181f067543eda4e2e6");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "5d29ab658da9623152522ecf416f8b76");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is added
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Storage-Revision: 7/1
# - Storage-Space: 262144/124 bytes
# - Double quotation marks and the & are encoded correctly
# - As value books is used
PUT {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "8e06f172d26bba01683878eb66762ae7");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "b4c61d297ab1069bd9f1914608666258");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "a3e7cfc1f93473ff00d4e2dfa483248e");
});
%}

###
# Expectations:
# - Status code 415 Unsupported Media Type
#   because the Content-Type is not text/plain.
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain-x

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "599942796ed18401c00fc85ff6affdd5");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "b44c8240027faac61d1a35bfc3c953ea");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "8add73aba839b154b44c7121cd173803");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "a3e7cfc1f93473ff00d4e2dfa483248e");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - In the storage the attribute is patched
# - Storage-Revision: 8/1
# - Storage-Space: 262144/128 bytes
# - Storage-Revision is increased
# - Storage-Space is used more
# - Storage-Expiration is extended
# - Content-Length is mssing but without effect (by the REST Client)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "599942796ed18401c00fc85ff6affdd5");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c2f60efc8bc9449802775b699b2596a1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "5a027a72abf28e88dc29549b6ed8958b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "b9a495f97d1471f34897e5b66775a3ab");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# Everything is case sensitive and therefore the attribute can't be found.
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
PATCH {{service}}/books/@attrb HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

test_value<2>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "99f375545c3aa534ff52d4a638988aa5");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "c2f60efc8bc9449802775b699b2596a1");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "5a027a72abf28e88dc29549b6ed8958b");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# Expectations:
# - Status code 304 Not Modified
#   attribute ___rev is ignored, but does not cause errors
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PATCH {{service}}/books/@___rev HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "c01d954b2f5d8c0826eb08b573bf1498");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
#   attribute ___uid is ignored, but does not cause errors
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PATCH {{service}}/books/@___uid HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "c51bd33388a7d4f74a64ca0aef64a739");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# No attributes can be set in the document.
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
#   the addressing of the XML document is detected
# - Storage-Revision is not increased
# - Storage-Expiration is extended
PUT {{service}}/@attrF HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4e1076d7de50c0c273bff5b991020b36");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# No attributes can be set in the document.
# Therefore none is found and status 404 occurs.
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
PATCH {{service}}/@attrF HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "2e075ca15836d46db71a9ac07ca16841");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# PATCH can only set attributes that exist
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
PATCH {{service}}/books/@attrE HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "ddb5ec8dc496516ae4a36da4657b8f6e");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "568f6045c4fe7aaae01b260ab2f44ddd");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "96ce033aedb11790a7b97aa65b9013c9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# XPath as value is not supported
# Expectations:
# - Status code 422 Unprocessable Content
# - Message: Invalid XPath (Axes are not supported)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

/wrong/wrong

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "599942796ed18401c00fc85ff6affdd5");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "568f6045c4fe7aaae01b260ab2f44ddd");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "96ce033aedb11790a7b97aa65b9013c9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "86d8fd87c9219e91407a387312139796");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# XPath with wrong function
# Expectations:
# - Status code 422 Unprocessable Content
# - Message: Invalid XPath function (Unknown function wrong)
PATCH {{service}}/books/@attrB HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/xpath

wrong(.)

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "599942796ed18401c00fc85ff6affdd5");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "765135bf530dfe743f99550dddee3f21");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "1c9aa69a02e388d260e0dc1583a63a08");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "e1cd192beb4500b8386aed2b26d4be84");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "43bfaf862c907e060503b3ac0ba23515");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# PATCH outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
# - URI: //books/../@___xxx
PATCH {{service}}?2f2f626f6f6b732f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "c248c75c0a632cd5a5551c14f1a17294");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# PATCH outside the root element, shall be ignored
# but PATCH can only set attributes that exist
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
# - Message: Invalid XPath (Functions are not supported)
# - URI: /*/../@___xxx
PATCH {{service}}?2f2a2f2e2e2f405f5f5f787878 HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "db469fbc0d1c7d58da27c98e3c75bfeb");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# XPath without target
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
PATCH {{service}}/wrong/@new HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "ac90d4443d56e84cf90ca176b6a9156a");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}

###
# XPath without target
# Expectations:
# - Status code 304 Not Modified
# - Storage-Revision: 8/0
# - Storage-Space: 262144/128 bytes
PATCH {{service}}/wrong/wrong/@new HTTP/1.0
Storage: {{storage_patch_attribute}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "3761132e9b0fa7ee2526b0223ee38c3f");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "529a22c4357bbb8ba0ecbdafc8a8226f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "41794affac60babf37a05ca5b3168737");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "252335a4e294acfa119704fa344ec477");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "148e84514e712a6732eda6f11ae9a0ac");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "f781697418b98f772275aeb5521508af");
});
%}
